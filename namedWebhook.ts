// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NamedWebhook extends pulumi.CustomResource {
    /**
     * Get an existing NamedWebhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NamedWebhookState, opts?: pulumi.CustomResourceOptions): NamedWebhook {
        return new NamedWebhook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spacelift-terraform-provider:index/namedWebhook:NamedWebhook';

    /**
     * Returns true if the given object is an instance of NamedWebhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NamedWebhook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NamedWebhook.__pulumiType;
    }

    /**
     * enables or disables sending webhooks.
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * endpoint to send the requests to
     */
    declare public readonly endpoint: pulumi.Output<string>;
    /**
     * labels for the webhook to use when referring in policies or filtering them
     */
    declare public readonly labels: pulumi.Output<string[] | undefined>;
    /**
     * the name for the webhook which will also be used to generate the id
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly namedWebhookId: pulumi.Output<string>;
    /**
     * secret used to sign each request so you're able to verify that the request comes from us. Defaults to an empty value.
     * Note that once it's created, it will be just an empty string in the state due to security reasons.
     */
    declare public readonly secret: pulumi.Output<string | undefined>;
    /**
     * ID of the space the webhook is in
     */
    declare public readonly spaceId: pulumi.Output<string>;

    /**
     * Create a NamedWebhook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NamedWebhookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NamedWebhookArgs | NamedWebhookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NamedWebhookState | undefined;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["endpoint"] = state?.endpoint;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["namedWebhookId"] = state?.namedWebhookId;
            resourceInputs["secret"] = state?.secret;
            resourceInputs["spaceId"] = state?.spaceId;
        } else {
            const args = argsOrState as NamedWebhookArgs | undefined;
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.endpoint === undefined && !opts.urn) {
                throw new Error("Missing required property 'endpoint'");
            }
            if (args?.spaceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'spaceId'");
            }
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["endpoint"] = args?.endpoint;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["namedWebhookId"] = args?.namedWebhookId;
            resourceInputs["secret"] = args?.secret ? pulumi.secret(args.secret) : undefined;
            resourceInputs["spaceId"] = args?.spaceId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NamedWebhook.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NamedWebhook resources.
 */
export interface NamedWebhookState {
    /**
     * enables or disables sending webhooks.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * endpoint to send the requests to
     */
    endpoint?: pulumi.Input<string>;
    /**
     * labels for the webhook to use when referring in policies or filtering them
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * the name for the webhook which will also be used to generate the id
     */
    name?: pulumi.Input<string>;
    namedWebhookId?: pulumi.Input<string>;
    /**
     * secret used to sign each request so you're able to verify that the request comes from us. Defaults to an empty value.
     * Note that once it's created, it will be just an empty string in the state due to security reasons.
     */
    secret?: pulumi.Input<string>;
    /**
     * ID of the space the webhook is in
     */
    spaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NamedWebhook resource.
 */
export interface NamedWebhookArgs {
    /**
     * enables or disables sending webhooks.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * endpoint to send the requests to
     */
    endpoint: pulumi.Input<string>;
    /**
     * labels for the webhook to use when referring in policies or filtering them
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * the name for the webhook which will also be used to generate the id
     */
    name?: pulumi.Input<string>;
    namedWebhookId?: pulumi.Input<string>;
    /**
     * secret used to sign each request so you're able to verify that the request comes from us. Defaults to an empty value.
     * Note that once it's created, it will be just an empty string in the state due to security reasons.
     */
    secret?: pulumi.Input<string>;
    /**
     * ID of the space the webhook is in
     */
    spaceId: pulumi.Input<string>;
}

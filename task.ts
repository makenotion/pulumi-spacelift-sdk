// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Task extends pulumi.CustomResource {
    /**
     * Get an existing Task resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TaskState, opts?: pulumi.CustomResourceOptions): Task {
        return new Task(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spacelift-terraform-provider:index/task:Task';

    /**
     * Returns true if the given object is an instance of Task.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Task {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Task.__pulumiType;
    }

    /**
     * Command that will be run.
     */
    declare public readonly command: pulumi.Output<string>;
    /**
     * Whether to initialize the stack or not. Default: `true`
     */
    declare public readonly init: pulumi.Output<boolean | undefined>;
    /**
     * Arbitrary map of values that, when changed, will trigger recreation of the resource.
     */
    declare public readonly keepers: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * ID of the stack for which to run the task
     */
    declare public readonly stackId: pulumi.Output<string>;
    declare public readonly taskId: pulumi.Output<string>;
    declare public readonly timeouts: pulumi.Output<outputs.TaskTimeouts | undefined>;
    /**
     * Wait for the run to finish
     */
    declare public readonly wait: pulumi.Output<outputs.TaskWait | undefined>;

    /**
     * Create a Task resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TaskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TaskArgs | TaskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TaskState | undefined;
            resourceInputs["command"] = state?.command;
            resourceInputs["init"] = state?.init;
            resourceInputs["keepers"] = state?.keepers;
            resourceInputs["stackId"] = state?.stackId;
            resourceInputs["taskId"] = state?.taskId;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["wait"] = state?.wait;
        } else {
            const args = argsOrState as TaskArgs | undefined;
            if (args?.command === undefined && !opts.urn) {
                throw new Error("Missing required property 'command'");
            }
            if (args?.stackId === undefined && !opts.urn) {
                throw new Error("Missing required property 'stackId'");
            }
            resourceInputs["command"] = args?.command;
            resourceInputs["init"] = args?.init;
            resourceInputs["keepers"] = args?.keepers;
            resourceInputs["stackId"] = args?.stackId;
            resourceInputs["taskId"] = args?.taskId;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["wait"] = args?.wait;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Task.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Task resources.
 */
export interface TaskState {
    /**
     * Command that will be run.
     */
    command?: pulumi.Input<string>;
    /**
     * Whether to initialize the stack or not. Default: `true`
     */
    init?: pulumi.Input<boolean>;
    /**
     * Arbitrary map of values that, when changed, will trigger recreation of the resource.
     */
    keepers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID of the stack for which to run the task
     */
    stackId?: pulumi.Input<string>;
    taskId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.TaskTimeouts>;
    /**
     * Wait for the run to finish
     */
    wait?: pulumi.Input<inputs.TaskWait>;
}

/**
 * The set of arguments for constructing a Task resource.
 */
export interface TaskArgs {
    /**
     * Command that will be run.
     */
    command: pulumi.Input<string>;
    /**
     * Whether to initialize the stack or not. Default: `true`
     */
    init?: pulumi.Input<boolean>;
    /**
     * Arbitrary map of values that, when changed, will trigger recreation of the resource.
     */
    keepers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID of the stack for which to run the task
     */
    stackId: pulumi.Input<string>;
    taskId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.TaskTimeouts>;
    /**
     * Wait for the run to finish
     */
    wait?: pulumi.Input<inputs.TaskWait>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BitbucketDatacenterIntegration extends pulumi.CustomResource {
    /**
     * Get an existing BitbucketDatacenterIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BitbucketDatacenterIntegrationState, opts?: pulumi.CustomResourceOptions): BitbucketDatacenterIntegration {
        return new BitbucketDatacenterIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spacelift:index/bitbucketDatacenterIntegration:BitbucketDatacenterIntegration';

    /**
     * Returns true if the given object is an instance of BitbucketDatacenterIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BitbucketDatacenterIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BitbucketDatacenterIntegration.__pulumiType;
    }

    /**
     * User access token from Bitbucket
     */
    public readonly accessToken!: pulumi.Output<string>;
    /**
     * The API host where requests will be sent
     */
    public readonly apiHost!: pulumi.Output<string>;
    /**
     * Bitbucket Datacenter integration description
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Bitbucket Datacenter integration is default.
     */
    public readonly isDefault!: pulumi.Output<boolean>;
    /**
     * Bitbucket Datacenter integration labels
     */
    public readonly labels!: pulumi.Output<string[]>;
    /**
     * Bitbucket Datacenter integration name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Bitbucket Datacenter integration space id. Defaults to `root`.
     */
    public readonly spaceId!: pulumi.Output<string>;
    /**
     * Indicates whether the integration should use git checkout. If false source code will be downloaded using the VCS API.
     * Defaults to false.
     */
    public readonly useGitCheckout!: pulumi.Output<boolean>;
    /**
     * User Facing Host which will be used for all user-facing URLs displayed in the Spacelift UI
     */
    public readonly userFacingHost!: pulumi.Output<string>;
    /**
     * Username which will be used to authenticate requests for cloning repositories
     */
    public readonly username!: pulumi.Output<string>;
    /**
     * VCS checks configured for Bitbucket Datacenter repositories. Possible values: INDIVIDUAL, AGGREGATED, ALL. Defaults to
     * INDIVIDUAL.
     */
    public readonly vcsChecks!: pulumi.Output<string | undefined>;
    /**
     * Secret for webhooks originating from Bitbucket repositories
     */
    public /*out*/ readonly webhookSecret!: pulumi.Output<string>;
    /**
     * URL for webhooks originating from Bitbucket repositories
     */
    public /*out*/ readonly webhookUrl!: pulumi.Output<string>;

    /**
     * Create a BitbucketDatacenterIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BitbucketDatacenterIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BitbucketDatacenterIntegrationArgs | BitbucketDatacenterIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BitbucketDatacenterIntegrationState | undefined;
            resourceInputs["accessToken"] = state ? state.accessToken : undefined;
            resourceInputs["apiHost"] = state ? state.apiHost : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["spaceId"] = state ? state.spaceId : undefined;
            resourceInputs["useGitCheckout"] = state ? state.useGitCheckout : undefined;
            resourceInputs["userFacingHost"] = state ? state.userFacingHost : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["vcsChecks"] = state ? state.vcsChecks : undefined;
            resourceInputs["webhookSecret"] = state ? state.webhookSecret : undefined;
            resourceInputs["webhookUrl"] = state ? state.webhookUrl : undefined;
        } else {
            const args = argsOrState as BitbucketDatacenterIntegrationArgs | undefined;
            if ((!args || args.accessToken === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessToken'");
            }
            if ((!args || args.apiHost === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiHost'");
            }
            if ((!args || args.isDefault === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isDefault'");
            }
            if ((!args || args.userFacingHost === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userFacingHost'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["accessToken"] = args?.accessToken ? pulumi.secret(args.accessToken) : undefined;
            resourceInputs["apiHost"] = args ? args.apiHost : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["isDefault"] = args ? args.isDefault : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["spaceId"] = args ? args.spaceId : undefined;
            resourceInputs["useGitCheckout"] = args ? args.useGitCheckout : undefined;
            resourceInputs["userFacingHost"] = args ? args.userFacingHost : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["vcsChecks"] = args ? args.vcsChecks : undefined;
            resourceInputs["webhookSecret"] = undefined /*out*/;
            resourceInputs["webhookUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessToken", "webhookSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BitbucketDatacenterIntegration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BitbucketDatacenterIntegration resources.
 */
export interface BitbucketDatacenterIntegrationState {
    /**
     * User access token from Bitbucket
     */
    accessToken?: pulumi.Input<string>;
    /**
     * The API host where requests will be sent
     */
    apiHost?: pulumi.Input<string>;
    /**
     * Bitbucket Datacenter integration description
     */
    description?: pulumi.Input<string>;
    /**
     * Bitbucket Datacenter integration is default.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * Bitbucket Datacenter integration labels
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Bitbucket Datacenter integration name
     */
    name?: pulumi.Input<string>;
    /**
     * Bitbucket Datacenter integration space id. Defaults to `root`.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * Indicates whether the integration should use git checkout. If false source code will be downloaded using the VCS API.
     * Defaults to false.
     */
    useGitCheckout?: pulumi.Input<boolean>;
    /**
     * User Facing Host which will be used for all user-facing URLs displayed in the Spacelift UI
     */
    userFacingHost?: pulumi.Input<string>;
    /**
     * Username which will be used to authenticate requests for cloning repositories
     */
    username?: pulumi.Input<string>;
    /**
     * VCS checks configured for Bitbucket Datacenter repositories. Possible values: INDIVIDUAL, AGGREGATED, ALL. Defaults to
     * INDIVIDUAL.
     */
    vcsChecks?: pulumi.Input<string>;
    /**
     * Secret for webhooks originating from Bitbucket repositories
     */
    webhookSecret?: pulumi.Input<string>;
    /**
     * URL for webhooks originating from Bitbucket repositories
     */
    webhookUrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BitbucketDatacenterIntegration resource.
 */
export interface BitbucketDatacenterIntegrationArgs {
    /**
     * User access token from Bitbucket
     */
    accessToken: pulumi.Input<string>;
    /**
     * The API host where requests will be sent
     */
    apiHost: pulumi.Input<string>;
    /**
     * Bitbucket Datacenter integration description
     */
    description?: pulumi.Input<string>;
    /**
     * Bitbucket Datacenter integration is default.
     */
    isDefault: pulumi.Input<boolean>;
    /**
     * Bitbucket Datacenter integration labels
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Bitbucket Datacenter integration name
     */
    name?: pulumi.Input<string>;
    /**
     * Bitbucket Datacenter integration space id. Defaults to `root`.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * Indicates whether the integration should use git checkout. If false source code will be downloaded using the VCS API.
     * Defaults to false.
     */
    useGitCheckout?: pulumi.Input<boolean>;
    /**
     * User Facing Host which will be used for all user-facing URLs displayed in the Spacelift UI
     */
    userFacingHost: pulumi.Input<string>;
    /**
     * Username which will be used to authenticate requests for cloning repositories
     */
    username: pulumi.Input<string>;
    /**
     * VCS checks configured for Bitbucket Datacenter repositories. Possible values: INDIVIDUAL, AGGREGATED, ALL. Defaults to
     * INDIVIDUAL.
     */
    vcsChecks?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Context extends pulumi.CustomResource {
    /**
     * Get an existing Context resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContextState, opts?: pulumi.CustomResourceOptions): Context {
        return new Context(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spacelift-terraform-provider:index/context:Context';

    /**
     * Returns true if the given object is an instance of Context.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Context {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Context.__pulumiType;
    }

    /**
     * List of after-apply scripts
     */
    declare public readonly afterApplies: pulumi.Output<string[] | undefined>;
    /**
     * List of after-destroy scripts
     */
    declare public readonly afterDestroys: pulumi.Output<string[] | undefined>;
    /**
     * List of after-init scripts
     */
    declare public readonly afterInits: pulumi.Output<string[] | undefined>;
    /**
     * List of after-perform scripts
     */
    declare public readonly afterPerforms: pulumi.Output<string[] | undefined>;
    /**
     * List of after-plan scripts
     */
    declare public readonly afterPlans: pulumi.Output<string[] | undefined>;
    /**
     * List of after-run scripts
     */
    declare public readonly afterRuns: pulumi.Output<string[] | undefined>;
    /**
     * List of before-apply scripts
     */
    declare public readonly beforeApplies: pulumi.Output<string[] | undefined>;
    /**
     * List of before-destroy scripts
     */
    declare public readonly beforeDestroys: pulumi.Output<string[] | undefined>;
    /**
     * List of before-init scripts
     */
    declare public readonly beforeInits: pulumi.Output<string[] | undefined>;
    /**
     * List of before-perform scripts
     */
    declare public readonly beforePerforms: pulumi.Output<string[] | undefined>;
    /**
     * List of before-plan scripts
     */
    declare public readonly beforePlans: pulumi.Output<string[] | undefined>;
    declare public readonly contextId: pulumi.Output<string>;
    /**
     * Free-form context description for users
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The labels of the context. To leverage the `autoattach` magic label, ensure your label follows the naming convention:
     * `autoattach:<your-label-name>`
     */
    declare public readonly labels: pulumi.Output<string[] | undefined>;
    /**
     * Name of the context - should be unique in one account
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * ID (slug) of the space the context is in
     */
    declare public readonly spaceId: pulumi.Output<string>;

    /**
     * Create a Context resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ContextArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContextArgs | ContextState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContextState | undefined;
            resourceInputs["afterApplies"] = state?.afterApplies;
            resourceInputs["afterDestroys"] = state?.afterDestroys;
            resourceInputs["afterInits"] = state?.afterInits;
            resourceInputs["afterPerforms"] = state?.afterPerforms;
            resourceInputs["afterPlans"] = state?.afterPlans;
            resourceInputs["afterRuns"] = state?.afterRuns;
            resourceInputs["beforeApplies"] = state?.beforeApplies;
            resourceInputs["beforeDestroys"] = state?.beforeDestroys;
            resourceInputs["beforeInits"] = state?.beforeInits;
            resourceInputs["beforePerforms"] = state?.beforePerforms;
            resourceInputs["beforePlans"] = state?.beforePlans;
            resourceInputs["contextId"] = state?.contextId;
            resourceInputs["description"] = state?.description;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["spaceId"] = state?.spaceId;
        } else {
            const args = argsOrState as ContextArgs | undefined;
            resourceInputs["afterApplies"] = args?.afterApplies;
            resourceInputs["afterDestroys"] = args?.afterDestroys;
            resourceInputs["afterInits"] = args?.afterInits;
            resourceInputs["afterPerforms"] = args?.afterPerforms;
            resourceInputs["afterPlans"] = args?.afterPlans;
            resourceInputs["afterRuns"] = args?.afterRuns;
            resourceInputs["beforeApplies"] = args?.beforeApplies;
            resourceInputs["beforeDestroys"] = args?.beforeDestroys;
            resourceInputs["beforeInits"] = args?.beforeInits;
            resourceInputs["beforePerforms"] = args?.beforePerforms;
            resourceInputs["beforePlans"] = args?.beforePlans;
            resourceInputs["contextId"] = args?.contextId;
            resourceInputs["description"] = args?.description;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["spaceId"] = args?.spaceId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Context.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Context resources.
 */
export interface ContextState {
    /**
     * List of after-apply scripts
     */
    afterApplies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of after-destroy scripts
     */
    afterDestroys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of after-init scripts
     */
    afterInits?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of after-perform scripts
     */
    afterPerforms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of after-plan scripts
     */
    afterPlans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of after-run scripts
     */
    afterRuns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of before-apply scripts
     */
    beforeApplies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of before-destroy scripts
     */
    beforeDestroys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of before-init scripts
     */
    beforeInits?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of before-perform scripts
     */
    beforePerforms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of before-plan scripts
     */
    beforePlans?: pulumi.Input<pulumi.Input<string>[]>;
    contextId?: pulumi.Input<string>;
    /**
     * Free-form context description for users
     */
    description?: pulumi.Input<string>;
    /**
     * The labels of the context. To leverage the `autoattach` magic label, ensure your label follows the naming convention:
     * `autoattach:<your-label-name>`
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the context - should be unique in one account
     */
    name?: pulumi.Input<string>;
    /**
     * ID (slug) of the space the context is in
     */
    spaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Context resource.
 */
export interface ContextArgs {
    /**
     * List of after-apply scripts
     */
    afterApplies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of after-destroy scripts
     */
    afterDestroys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of after-init scripts
     */
    afterInits?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of after-perform scripts
     */
    afterPerforms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of after-plan scripts
     */
    afterPlans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of after-run scripts
     */
    afterRuns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of before-apply scripts
     */
    beforeApplies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of before-destroy scripts
     */
    beforeDestroys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of before-init scripts
     */
    beforeInits?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of before-perform scripts
     */
    beforePerforms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of before-plan scripts
     */
    beforePlans?: pulumi.Input<pulumi.Input<string>[]>;
    contextId?: pulumi.Input<string>;
    /**
     * Free-form context description for users
     */
    description?: pulumi.Input<string>;
    /**
     * The labels of the context. To leverage the `autoattach` magic label, ensure your label follows the naming convention:
     * `autoattach:<your-label-name>`
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the context - should be unique in one account
     */
    name?: pulumi.Input<string>;
    /**
     * ID (slug) of the space the context is in
     */
    spaceId?: pulumi.Input<string>;
}

"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackDependencyReference = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class StackDependencyReference extends pulumi.CustomResource {
    /**
     * Get an existing StackDependencyReference resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new StackDependencyReference(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of StackDependencyReference.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StackDependencyReference.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["inputName"] = state ? state.inputName : undefined;
            resourceInputs["outputName"] = state ? state.outputName : undefined;
            resourceInputs["stackDependencyId"] = state ? state.stackDependencyId : undefined;
            resourceInputs["stackDependencyReferenceId"] = state ? state.stackDependencyReferenceId : undefined;
            resourceInputs["triggerAlways"] = state ? state.triggerAlways : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.inputName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inputName'");
            }
            if ((!args || args.outputName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'outputName'");
            }
            if ((!args || args.stackDependencyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stackDependencyId'");
            }
            resourceInputs["inputName"] = args ? args.inputName : undefined;
            resourceInputs["outputName"] = args ? args.outputName : undefined;
            resourceInputs["stackDependencyId"] = args ? args.stackDependencyId : undefined;
            resourceInputs["stackDependencyReferenceId"] = args ? args.stackDependencyReferenceId : undefined;
            resourceInputs["triggerAlways"] = args ? args.triggerAlways : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StackDependencyReference.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.StackDependencyReference = StackDependencyReference;
/** @internal */
StackDependencyReference.__pulumiType = 'spacelift:index/stackDependencyReference:StackDependencyReference';
//# sourceMappingURL=stackDependencyReference.js.map
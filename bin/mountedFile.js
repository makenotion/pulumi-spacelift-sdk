"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.MountedFile = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class MountedFile extends pulumi.CustomResource {
    /**
     * Get an existing MountedFile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new MountedFile(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of MountedFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MountedFile.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["checksum"] = state?.checksum;
            resourceInputs["content"] = state?.content;
            resourceInputs["contextId"] = state?.contextId;
            resourceInputs["description"] = state?.description;
            resourceInputs["moduleId"] = state?.moduleId;
            resourceInputs["mountedFileId"] = state?.mountedFileId;
            resourceInputs["relativePath"] = state?.relativePath;
            resourceInputs["stackId"] = state?.stackId;
            resourceInputs["writeOnly"] = state?.writeOnly;
        }
        else {
            const args = argsOrState;
            if (args?.content === undefined && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if (args?.relativePath === undefined && !opts.urn) {
                throw new Error("Missing required property 'relativePath'");
            }
            resourceInputs["content"] = args?.content ? pulumi.secret(args.content) : undefined;
            resourceInputs["contextId"] = args?.contextId;
            resourceInputs["description"] = args?.description;
            resourceInputs["moduleId"] = args?.moduleId;
            resourceInputs["mountedFileId"] = args?.mountedFileId;
            resourceInputs["relativePath"] = args?.relativePath;
            resourceInputs["stackId"] = args?.stackId;
            resourceInputs["writeOnly"] = args?.writeOnly;
            resourceInputs["checksum"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["content"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MountedFile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.MountedFile = MountedFile;
/** @internal */
MountedFile.__pulumiType = 'spacelift-terraform-provider:index/mountedFile:MountedFile';
//# sourceMappingURL=mountedFile.js.map
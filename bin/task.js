"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Task = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Task extends pulumi.CustomResource {
    /**
     * Get an existing Task resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Task(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Task.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Task.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["command"] = state?.command;
            resourceInputs["init"] = state?.init;
            resourceInputs["keepers"] = state?.keepers;
            resourceInputs["stackId"] = state?.stackId;
            resourceInputs["taskId"] = state?.taskId;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["wait"] = state?.wait;
        }
        else {
            const args = argsOrState;
            if (args?.command === undefined && !opts.urn) {
                throw new Error("Missing required property 'command'");
            }
            if (args?.stackId === undefined && !opts.urn) {
                throw new Error("Missing required property 'stackId'");
            }
            resourceInputs["command"] = args?.command;
            resourceInputs["init"] = args?.init;
            resourceInputs["keepers"] = args?.keepers;
            resourceInputs["stackId"] = args?.stackId;
            resourceInputs["taskId"] = args?.taskId;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["wait"] = args?.wait;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Task.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.Task = Task;
/** @internal */
Task.__pulumiType = 'spacelift-terraform-provider:index/task:Task';
//# sourceMappingURL=task.js.map
"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformProvider = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class TerraformProvider extends pulumi.CustomResource {
    /**
     * Get an existing TerraformProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TerraformProvider(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of TerraformProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TerraformProvider.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["description"] = state?.description;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["public"] = state?.public;
            resourceInputs["spaceId"] = state?.spaceId;
            resourceInputs["terraformProviderId"] = state?.terraformProviderId;
            resourceInputs["type"] = state?.type;
        }
        else {
            const args = argsOrState;
            if (args?.spaceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'spaceId'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["public"] = args?.public;
            resourceInputs["spaceId"] = args?.spaceId;
            resourceInputs["terraformProviderId"] = args?.terraformProviderId;
            resourceInputs["type"] = args?.type;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TerraformProvider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.TerraformProvider = TerraformProvider;
/** @internal */
TerraformProvider.__pulumiType = 'spacelift-terraform-provider:index/terraformProvider:TerraformProvider';
//# sourceMappingURL=terraformProvider.js.map
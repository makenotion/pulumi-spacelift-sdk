"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Module = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Module extends pulumi.CustomResource {
    /**
     * Get an existing Module resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Module(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Module.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Module.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["administrative"] = state?.administrative;
            resourceInputs["awsAssumeRolePolicyStatement"] = state?.awsAssumeRolePolicyStatement;
            resourceInputs["azureDevops"] = state?.azureDevops;
            resourceInputs["bitbucketCloud"] = state?.bitbucketCloud;
            resourceInputs["bitbucketDatacenter"] = state?.bitbucketDatacenter;
            resourceInputs["branch"] = state?.branch;
            resourceInputs["description"] = state?.description;
            resourceInputs["enableLocalPreview"] = state?.enableLocalPreview;
            resourceInputs["gitSparseCheckoutPaths"] = state?.gitSparseCheckoutPaths;
            resourceInputs["githubEnterprise"] = state?.githubEnterprise;
            resourceInputs["gitlab"] = state?.gitlab;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["moduleId"] = state?.moduleId;
            resourceInputs["name"] = state?.name;
            resourceInputs["projectRoot"] = state?.projectRoot;
            resourceInputs["protectFromDeletion"] = state?.protectFromDeletion;
            resourceInputs["public"] = state?.public;
            resourceInputs["rawGit"] = state?.rawGit;
            resourceInputs["repository"] = state?.repository;
            resourceInputs["runnerImage"] = state?.runnerImage;
            resourceInputs["sharedAccounts"] = state?.sharedAccounts;
            resourceInputs["spaceId"] = state?.spaceId;
            resourceInputs["terraformProvider"] = state?.terraformProvider;
            resourceInputs["workerPoolId"] = state?.workerPoolId;
            resourceInputs["workflowTool"] = state?.workflowTool;
        }
        else {
            const args = argsOrState;
            if (args?.branch === undefined && !opts.urn) {
                throw new Error("Missing required property 'branch'");
            }
            if (args?.repository === undefined && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            resourceInputs["administrative"] = args?.administrative;
            resourceInputs["azureDevops"] = args?.azureDevops;
            resourceInputs["bitbucketCloud"] = args?.bitbucketCloud;
            resourceInputs["bitbucketDatacenter"] = args?.bitbucketDatacenter;
            resourceInputs["branch"] = args?.branch;
            resourceInputs["description"] = args?.description;
            resourceInputs["enableLocalPreview"] = args?.enableLocalPreview;
            resourceInputs["gitSparseCheckoutPaths"] = args?.gitSparseCheckoutPaths;
            resourceInputs["githubEnterprise"] = args?.githubEnterprise;
            resourceInputs["gitlab"] = args?.gitlab;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["moduleId"] = args?.moduleId;
            resourceInputs["name"] = args?.name;
            resourceInputs["projectRoot"] = args?.projectRoot;
            resourceInputs["protectFromDeletion"] = args?.protectFromDeletion;
            resourceInputs["public"] = args?.public;
            resourceInputs["rawGit"] = args?.rawGit;
            resourceInputs["repository"] = args?.repository;
            resourceInputs["runnerImage"] = args?.runnerImage;
            resourceInputs["sharedAccounts"] = args?.sharedAccounts;
            resourceInputs["spaceId"] = args?.spaceId;
            resourceInputs["terraformProvider"] = args?.terraformProvider;
            resourceInputs["workerPoolId"] = args?.workerPoolId;
            resourceInputs["workflowTool"] = args?.workflowTool;
            resourceInputs["awsAssumeRolePolicyStatement"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Module.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.Module = Module;
/** @internal */
Module.__pulumiType = 'spacelift-terraform-provider:index/module:Module';
//# sourceMappingURL=module.js.map
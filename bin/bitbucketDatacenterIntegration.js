"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitbucketDatacenterIntegration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class BitbucketDatacenterIntegration extends pulumi.CustomResource {
    /**
     * Get an existing BitbucketDatacenterIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new BitbucketDatacenterIntegration(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of BitbucketDatacenterIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BitbucketDatacenterIntegration.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accessToken"] = state?.accessToken;
            resourceInputs["apiHost"] = state?.apiHost;
            resourceInputs["description"] = state?.description;
            resourceInputs["isDefault"] = state?.isDefault;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["spaceId"] = state?.spaceId;
            resourceInputs["useGitCheckout"] = state?.useGitCheckout;
            resourceInputs["userFacingHost"] = state?.userFacingHost;
            resourceInputs["username"] = state?.username;
            resourceInputs["vcsChecks"] = state?.vcsChecks;
            resourceInputs["webhookSecret"] = state?.webhookSecret;
            resourceInputs["webhookUrl"] = state?.webhookUrl;
        }
        else {
            const args = argsOrState;
            if (args?.accessToken === undefined && !opts.urn) {
                throw new Error("Missing required property 'accessToken'");
            }
            if (args?.apiHost === undefined && !opts.urn) {
                throw new Error("Missing required property 'apiHost'");
            }
            if (args?.isDefault === undefined && !opts.urn) {
                throw new Error("Missing required property 'isDefault'");
            }
            if (args?.userFacingHost === undefined && !opts.urn) {
                throw new Error("Missing required property 'userFacingHost'");
            }
            if (args?.username === undefined && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["accessToken"] = args?.accessToken ? pulumi.secret(args.accessToken) : undefined;
            resourceInputs["apiHost"] = args?.apiHost;
            resourceInputs["description"] = args?.description;
            resourceInputs["isDefault"] = args?.isDefault;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["spaceId"] = args?.spaceId;
            resourceInputs["useGitCheckout"] = args?.useGitCheckout;
            resourceInputs["userFacingHost"] = args?.userFacingHost;
            resourceInputs["username"] = args?.username;
            resourceInputs["vcsChecks"] = args?.vcsChecks;
            resourceInputs["webhookSecret"] = undefined /*out*/;
            resourceInputs["webhookUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessToken", "webhookSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BitbucketDatacenterIntegration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.BitbucketDatacenterIntegration = BitbucketDatacenterIntegration;
/** @internal */
BitbucketDatacenterIntegration.__pulumiType = 'spacelift-terraform-provider:index/bitbucketDatacenterIntegration:BitbucketDatacenterIntegration';
//# sourceMappingURL=bitbucketDatacenterIntegration.js.map
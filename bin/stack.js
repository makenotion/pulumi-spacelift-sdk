"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stack = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Stack extends pulumi.CustomResource {
    /**
     * Get an existing Stack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Stack(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Stack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Stack.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["additionalProjectGlobs"] = state?.additionalProjectGlobs;
            resourceInputs["administrative"] = state?.administrative;
            resourceInputs["afterApplies"] = state?.afterApplies;
            resourceInputs["afterDestroys"] = state?.afterDestroys;
            resourceInputs["afterInits"] = state?.afterInits;
            resourceInputs["afterPerforms"] = state?.afterPerforms;
            resourceInputs["afterPlans"] = state?.afterPlans;
            resourceInputs["afterRuns"] = state?.afterRuns;
            resourceInputs["ansible"] = state?.ansible;
            resourceInputs["autodeploy"] = state?.autodeploy;
            resourceInputs["autoretry"] = state?.autoretry;
            resourceInputs["awsAssumeRolePolicyStatement"] = state?.awsAssumeRolePolicyStatement;
            resourceInputs["azureDevops"] = state?.azureDevops;
            resourceInputs["beforeApplies"] = state?.beforeApplies;
            resourceInputs["beforeDestroys"] = state?.beforeDestroys;
            resourceInputs["beforeInits"] = state?.beforeInits;
            resourceInputs["beforePerforms"] = state?.beforePerforms;
            resourceInputs["beforePlans"] = state?.beforePlans;
            resourceInputs["bitbucketCloud"] = state?.bitbucketCloud;
            resourceInputs["bitbucketDatacenter"] = state?.bitbucketDatacenter;
            resourceInputs["branch"] = state?.branch;
            resourceInputs["cloudformation"] = state?.cloudformation;
            resourceInputs["description"] = state?.description;
            resourceInputs["enableLocalPreview"] = state?.enableLocalPreview;
            resourceInputs["enableSensitiveOutputsUpload"] = state?.enableSensitiveOutputsUpload;
            resourceInputs["enableWellKnownSecretMasking"] = state?.enableWellKnownSecretMasking;
            resourceInputs["gitSparseCheckoutPaths"] = state?.gitSparseCheckoutPaths;
            resourceInputs["githubActionDeploy"] = state?.githubActionDeploy;
            resourceInputs["githubEnterprise"] = state?.githubEnterprise;
            resourceInputs["gitlab"] = state?.gitlab;
            resourceInputs["importState"] = state?.importState;
            resourceInputs["importStateFile"] = state?.importStateFile;
            resourceInputs["kubernetes"] = state?.kubernetes;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["manageState"] = state?.manageState;
            resourceInputs["name"] = state?.name;
            resourceInputs["projectRoot"] = state?.projectRoot;
            resourceInputs["protectFromDeletion"] = state?.protectFromDeletion;
            resourceInputs["pulumiInfo"] = state?.pulumiInfo;
            resourceInputs["rawGit"] = state?.rawGit;
            resourceInputs["repository"] = state?.repository;
            resourceInputs["runnerImage"] = state?.runnerImage;
            resourceInputs["showcase"] = state?.showcase;
            resourceInputs["slug"] = state?.slug;
            resourceInputs["spaceId"] = state?.spaceId;
            resourceInputs["stackId"] = state?.stackId;
            resourceInputs["terraformExternalStateAccess"] = state?.terraformExternalStateAccess;
            resourceInputs["terraformSmartSanitization"] = state?.terraformSmartSanitization;
            resourceInputs["terraformVersion"] = state?.terraformVersion;
            resourceInputs["terraformWorkflowTool"] = state?.terraformWorkflowTool;
            resourceInputs["terraformWorkspace"] = state?.terraformWorkspace;
            resourceInputs["terragrunt"] = state?.terragrunt;
            resourceInputs["workerPoolId"] = state?.workerPoolId;
        }
        else {
            const args = argsOrState;
            if (args?.branch === undefined && !opts.urn) {
                throw new Error("Missing required property 'branch'");
            }
            if (args?.repository === undefined && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            resourceInputs["additionalProjectGlobs"] = args?.additionalProjectGlobs;
            resourceInputs["administrative"] = args?.administrative;
            resourceInputs["afterApplies"] = args?.afterApplies;
            resourceInputs["afterDestroys"] = args?.afterDestroys;
            resourceInputs["afterInits"] = args?.afterInits;
            resourceInputs["afterPerforms"] = args?.afterPerforms;
            resourceInputs["afterPlans"] = args?.afterPlans;
            resourceInputs["afterRuns"] = args?.afterRuns;
            resourceInputs["ansible"] = args?.ansible;
            resourceInputs["autodeploy"] = args?.autodeploy;
            resourceInputs["autoretry"] = args?.autoretry;
            resourceInputs["azureDevops"] = args?.azureDevops;
            resourceInputs["beforeApplies"] = args?.beforeApplies;
            resourceInputs["beforeDestroys"] = args?.beforeDestroys;
            resourceInputs["beforeInits"] = args?.beforeInits;
            resourceInputs["beforePerforms"] = args?.beforePerforms;
            resourceInputs["beforePlans"] = args?.beforePlans;
            resourceInputs["bitbucketCloud"] = args?.bitbucketCloud;
            resourceInputs["bitbucketDatacenter"] = args?.bitbucketDatacenter;
            resourceInputs["branch"] = args?.branch;
            resourceInputs["cloudformation"] = args?.cloudformation;
            resourceInputs["description"] = args?.description;
            resourceInputs["enableLocalPreview"] = args?.enableLocalPreview;
            resourceInputs["enableSensitiveOutputsUpload"] = args?.enableSensitiveOutputsUpload;
            resourceInputs["enableWellKnownSecretMasking"] = args?.enableWellKnownSecretMasking;
            resourceInputs["gitSparseCheckoutPaths"] = args?.gitSparseCheckoutPaths;
            resourceInputs["githubActionDeploy"] = args?.githubActionDeploy;
            resourceInputs["githubEnterprise"] = args?.githubEnterprise;
            resourceInputs["gitlab"] = args?.gitlab;
            resourceInputs["importState"] = args?.importState ? pulumi.secret(args.importState) : undefined;
            resourceInputs["importStateFile"] = args?.importStateFile;
            resourceInputs["kubernetes"] = args?.kubernetes;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["manageState"] = args?.manageState;
            resourceInputs["name"] = args?.name;
            resourceInputs["projectRoot"] = args?.projectRoot;
            resourceInputs["protectFromDeletion"] = args?.protectFromDeletion;
            resourceInputs["pulumiInfo"] = args?.pulumiInfo;
            resourceInputs["rawGit"] = args?.rawGit;
            resourceInputs["repository"] = args?.repository;
            resourceInputs["runnerImage"] = args?.runnerImage;
            resourceInputs["showcase"] = args?.showcase;
            resourceInputs["slug"] = args?.slug;
            resourceInputs["spaceId"] = args?.spaceId;
            resourceInputs["stackId"] = args?.stackId;
            resourceInputs["terraformExternalStateAccess"] = args?.terraformExternalStateAccess;
            resourceInputs["terraformSmartSanitization"] = args?.terraformSmartSanitization;
            resourceInputs["terraformVersion"] = args?.terraformVersion;
            resourceInputs["terraformWorkflowTool"] = args?.terraformWorkflowTool;
            resourceInputs["terraformWorkspace"] = args?.terraformWorkspace;
            resourceInputs["terragrunt"] = args?.terragrunt;
            resourceInputs["workerPoolId"] = args?.workerPoolId;
            resourceInputs["awsAssumeRolePolicyStatement"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["importState"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Stack.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.Stack = Stack;
/** @internal */
Stack.__pulumiType = 'spacelift-terraform-provider:index/stack:Stack';
//# sourceMappingURL=stack.js.map
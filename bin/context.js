"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Context = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Context extends pulumi.CustomResource {
    /**
     * Get an existing Context resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Context(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Context.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Context.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["afterApplies"] = state?.afterApplies;
            resourceInputs["afterDestroys"] = state?.afterDestroys;
            resourceInputs["afterInits"] = state?.afterInits;
            resourceInputs["afterPerforms"] = state?.afterPerforms;
            resourceInputs["afterPlans"] = state?.afterPlans;
            resourceInputs["afterRuns"] = state?.afterRuns;
            resourceInputs["beforeApplies"] = state?.beforeApplies;
            resourceInputs["beforeDestroys"] = state?.beforeDestroys;
            resourceInputs["beforeInits"] = state?.beforeInits;
            resourceInputs["beforePerforms"] = state?.beforePerforms;
            resourceInputs["beforePlans"] = state?.beforePlans;
            resourceInputs["contextId"] = state?.contextId;
            resourceInputs["description"] = state?.description;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["spaceId"] = state?.spaceId;
        }
        else {
            const args = argsOrState;
            resourceInputs["afterApplies"] = args?.afterApplies;
            resourceInputs["afterDestroys"] = args?.afterDestroys;
            resourceInputs["afterInits"] = args?.afterInits;
            resourceInputs["afterPerforms"] = args?.afterPerforms;
            resourceInputs["afterPlans"] = args?.afterPlans;
            resourceInputs["afterRuns"] = args?.afterRuns;
            resourceInputs["beforeApplies"] = args?.beforeApplies;
            resourceInputs["beforeDestroys"] = args?.beforeDestroys;
            resourceInputs["beforeInits"] = args?.beforeInits;
            resourceInputs["beforePerforms"] = args?.beforePerforms;
            resourceInputs["beforePlans"] = args?.beforePlans;
            resourceInputs["contextId"] = args?.contextId;
            resourceInputs["description"] = args?.description;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["spaceId"] = args?.spaceId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Context.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.Context = Context;
/** @internal */
Context.__pulumiType = 'spacelift-terraform-provider:index/context:Context';
//# sourceMappingURL=context.js.map
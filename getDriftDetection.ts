// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getDriftDetection(args: GetDriftDetectionArgs, opts?: pulumi.InvokeOptions): Promise<GetDriftDetectionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("spacelift:index/getDriftDetection:getDriftDetection", {
        "id": args.id,
        "ignoreState": args.ignoreState,
        "stackId": args.stackId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDriftDetection.
 */
export interface GetDriftDetectionArgs {
    id?: string;
    ignoreState?: boolean;
    stackId: string;
}

/**
 * A collection of values returned by getDriftDetection.
 */
export interface GetDriftDetectionResult {
    readonly id: string;
    readonly ignoreState?: boolean;
    readonly reconcile: boolean;
    readonly schedules: string[];
    readonly stackId: string;
    readonly timezone: string;
}
export function getDriftDetectionOutput(args: GetDriftDetectionOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDriftDetectionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("spacelift:index/getDriftDetection:getDriftDetection", {
        "id": args.id,
        "ignoreState": args.ignoreState,
        "stackId": args.stackId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDriftDetection.
 */
export interface GetDriftDetectionOutputArgs {
    id?: pulumi.Input<string>;
    ignoreState?: pulumi.Input<boolean>;
    stackId: pulumi.Input<string>;
}

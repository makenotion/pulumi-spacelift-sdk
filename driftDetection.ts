// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DriftDetection extends pulumi.CustomResource {
    /**
     * Get an existing DriftDetection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DriftDetectionState, opts?: pulumi.CustomResourceOptions): DriftDetection {
        return new DriftDetection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spacelift-terraform-provider:index/driftDetection:DriftDetection';

    /**
     * Returns true if the given object is an instance of DriftDetection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DriftDetection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DriftDetection.__pulumiType;
    }

    declare public readonly driftDetectionId: pulumi.Output<string>;
    /**
     * Controls whether drift detection should be performed on a stack in any final state instead of just 'Finished'.
     */
    declare public readonly ignoreState: pulumi.Output<boolean | undefined>;
    /**
     * Whether a tracked run should be triggered when drift is detected.
     */
    declare public readonly reconcile: pulumi.Output<boolean | undefined>;
    /**
     * List of cron schedule expressions based on which drift detection should be triggered.
     */
    declare public readonly schedules: pulumi.Output<string[]>;
    /**
     * ID of the stack for which to set up drift detection
     */
    declare public readonly stackId: pulumi.Output<string>;
    /**
     * Timezone in which the schedule is expressed. Defaults to `UTC`.
     */
    declare public readonly timezone: pulumi.Output<string | undefined>;

    /**
     * Create a DriftDetection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DriftDetectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DriftDetectionArgs | DriftDetectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DriftDetectionState | undefined;
            resourceInputs["driftDetectionId"] = state?.driftDetectionId;
            resourceInputs["ignoreState"] = state?.ignoreState;
            resourceInputs["reconcile"] = state?.reconcile;
            resourceInputs["schedules"] = state?.schedules;
            resourceInputs["stackId"] = state?.stackId;
            resourceInputs["timezone"] = state?.timezone;
        } else {
            const args = argsOrState as DriftDetectionArgs | undefined;
            if (args?.schedules === undefined && !opts.urn) {
                throw new Error("Missing required property 'schedules'");
            }
            if (args?.stackId === undefined && !opts.urn) {
                throw new Error("Missing required property 'stackId'");
            }
            resourceInputs["driftDetectionId"] = args?.driftDetectionId;
            resourceInputs["ignoreState"] = args?.ignoreState;
            resourceInputs["reconcile"] = args?.reconcile;
            resourceInputs["schedules"] = args?.schedules;
            resourceInputs["stackId"] = args?.stackId;
            resourceInputs["timezone"] = args?.timezone;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DriftDetection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DriftDetection resources.
 */
export interface DriftDetectionState {
    driftDetectionId?: pulumi.Input<string>;
    /**
     * Controls whether drift detection should be performed on a stack in any final state instead of just 'Finished'.
     */
    ignoreState?: pulumi.Input<boolean>;
    /**
     * Whether a tracked run should be triggered when drift is detected.
     */
    reconcile?: pulumi.Input<boolean>;
    /**
     * List of cron schedule expressions based on which drift detection should be triggered.
     */
    schedules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the stack for which to set up drift detection
     */
    stackId?: pulumi.Input<string>;
    /**
     * Timezone in which the schedule is expressed. Defaults to `UTC`.
     */
    timezone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DriftDetection resource.
 */
export interface DriftDetectionArgs {
    driftDetectionId?: pulumi.Input<string>;
    /**
     * Controls whether drift detection should be performed on a stack in any final state instead of just 'Finished'.
     */
    ignoreState?: pulumi.Input<boolean>;
    /**
     * Whether a tracked run should be triggered when drift is detected.
     */
    reconcile?: pulumi.Input<boolean>;
    /**
     * List of cron schedule expressions based on which drift detection should be triggered.
     */
    schedules: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the stack for which to set up drift detection
     */
    stackId: pulumi.Input<string>;
    /**
     * Timezone in which the schedule is expressed. Defaults to `UTC`.
     */
    timezone?: pulumi.Input<string>;
}

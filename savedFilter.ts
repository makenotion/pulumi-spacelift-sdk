// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SavedFilter extends pulumi.CustomResource {
    /**
     * Get an existing SavedFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SavedFilterState, opts?: pulumi.CustomResourceOptions): SavedFilter {
        return new SavedFilter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spacelift:index/savedFilter:SavedFilter';

    /**
     * Returns true if the given object is an instance of SavedFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SavedFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SavedFilter.__pulumiType;
    }

    /**
     * Login of the user who created the saved filter
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * Data is the JSON representation of the filter data
     */
    public readonly data!: pulumi.Output<string>;
    /**
     * Toggle whether the filter is public or not
     */
    public readonly isPublic!: pulumi.Output<boolean>;
    /**
     * Name of the saved filter
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Type describes the type of the filter. It is used to determine which view the filter is for. Possible values are
     * `stacks`, `blueprints`, `contexts`, `webhooks`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a SavedFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SavedFilterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SavedFilterArgs | SavedFilterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SavedFilterState | undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["isPublic"] = state ? state.isPublic : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SavedFilterArgs | undefined;
            if ((!args || args.data === undefined) && !opts.urn) {
                throw new Error("Missing required property 'data'");
            }
            if ((!args || args.isPublic === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isPublic'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["data"] = args ? args.data : undefined;
            resourceInputs["isPublic"] = args ? args.isPublic : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["createdBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SavedFilter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SavedFilter resources.
 */
export interface SavedFilterState {
    /**
     * Login of the user who created the saved filter
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Data is the JSON representation of the filter data
     */
    data?: pulumi.Input<string>;
    /**
     * Toggle whether the filter is public or not
     */
    isPublic?: pulumi.Input<boolean>;
    /**
     * Name of the saved filter
     */
    name?: pulumi.Input<string>;
    /**
     * Type describes the type of the filter. It is used to determine which view the filter is for. Possible values are
     * `stacks`, `blueprints`, `contexts`, `webhooks`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SavedFilter resource.
 */
export interface SavedFilterArgs {
    /**
     * Data is the JSON representation of the filter data
     */
    data: pulumi.Input<string>;
    /**
     * Toggle whether the filter is public or not
     */
    isPublic: pulumi.Input<boolean>;
    /**
     * Name of the saved filter
     */
    name?: pulumi.Input<string>;
    /**
     * Type describes the type of the filter. It is used to determine which view the filter is for. Possible values are
     * `stacks`, `blueprints`, `contexts`, `webhooks`.
     */
    type: pulumi.Input<string>;
}

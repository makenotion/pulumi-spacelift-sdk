// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Module extends pulumi.CustomResource {
    /**
     * Get an existing Module resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ModuleState, opts?: pulumi.CustomResourceOptions): Module {
        return new Module(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spacelift-terraform-provider:index/module:Module';

    /**
     * Returns true if the given object is an instance of Module.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Module {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Module.__pulumiType;
    }

    /**
     * Indicates whether this module can manage others. Defaults to `false`.
     */
    declare public readonly administrative: pulumi.Output<boolean | undefined>;
    /**
     * AWS IAM assume role policy statement setting up trust relationship
     */
    declare public /*out*/ readonly awsAssumeRolePolicyStatement: pulumi.Output<string>;
    /**
     * Azure DevOps VCS settings
     */
    declare public readonly azureDevops: pulumi.Output<outputs.ModuleAzureDevops | undefined>;
    /**
     * Bitbucket Cloud VCS settings
     */
    declare public readonly bitbucketCloud: pulumi.Output<outputs.ModuleBitbucketCloud | undefined>;
    /**
     * Bitbucket Datacenter VCS settings
     */
    declare public readonly bitbucketDatacenter: pulumi.Output<outputs.ModuleBitbucketDatacenter | undefined>;
    /**
     * GitHub branch to apply changes to
     */
    declare public readonly branch: pulumi.Output<string>;
    /**
     * Free-form module description for users
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Indicates whether local preview versions can be triggered on this Module. Defaults to `false`.
     */
    declare public readonly enableLocalPreview: pulumi.Output<boolean | undefined>;
    /**
     * Git sparse checkout paths is an optional list of paths to use for sparse checkout. If not set, the entire repository
     * will be checked out.
     */
    declare public readonly gitSparseCheckoutPaths: pulumi.Output<string[] | undefined>;
    /**
     * GitHub Enterprise (self-hosted) VCS settings
     */
    declare public readonly githubEnterprise: pulumi.Output<outputs.ModuleGithubEnterprise | undefined>;
    /**
     * GitLab VCS settings
     */
    declare public readonly gitlab: pulumi.Output<outputs.ModuleGitlab | undefined>;
    declare public readonly labels: pulumi.Output<string[] | undefined>;
    declare public readonly moduleId: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    /**
     * Project root is the optional directory relative to the repository root containing the module source code.
     */
    declare public readonly projectRoot: pulumi.Output<string | undefined>;
    /**
     * Protect this module from accidental deletion. If set, attempts to delete this module will fail. Defaults to `false`.
     */
    declare public readonly protectFromDeletion: pulumi.Output<boolean | undefined>;
    /**
     * Make this module publicly accessible. Can only be set at creation time. Defaults to `false`.
     */
    declare public readonly public: pulumi.Output<boolean | undefined>;
    /**
     * One-way VCS integration using a raw Git repository link
     */
    declare public readonly rawGit: pulumi.Output<outputs.ModuleRawGit | undefined>;
    /**
     * Name of the repository, without the owner part
     */
    declare public readonly repository: pulumi.Output<string>;
    /**
     * Name of the Docker image used to process Runs
     */
    declare public readonly runnerImage: pulumi.Output<string | undefined>;
    /**
     * List of the accounts (subdomains) which should have access to the Module
     */
    declare public readonly sharedAccounts: pulumi.Output<string[] | undefined>;
    /**
     * ID (slug) of the space the module is in
     */
    declare public readonly spaceId: pulumi.Output<string>;
    declare public readonly terraformProvider: pulumi.Output<string>;
    /**
     * ID of the worker pool to use. NOTE: worker_pool_id is required when using a self-hosted instance of Spacelift.
     */
    declare public readonly workerPoolId: pulumi.Output<string | undefined>;
    /**
     * Defines the tool that will be used to execute the workflow. This can be one of `OPEN_TOFU`, `TERRAFORM_FOSS` or
     * `CUSTOM`. Defaults to `TERRAFORM_FOSS`.
     */
    declare public readonly workflowTool: pulumi.Output<string>;

    /**
     * Create a Module resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ModuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ModuleArgs | ModuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ModuleState | undefined;
            resourceInputs["administrative"] = state?.administrative;
            resourceInputs["awsAssumeRolePolicyStatement"] = state?.awsAssumeRolePolicyStatement;
            resourceInputs["azureDevops"] = state?.azureDevops;
            resourceInputs["bitbucketCloud"] = state?.bitbucketCloud;
            resourceInputs["bitbucketDatacenter"] = state?.bitbucketDatacenter;
            resourceInputs["branch"] = state?.branch;
            resourceInputs["description"] = state?.description;
            resourceInputs["enableLocalPreview"] = state?.enableLocalPreview;
            resourceInputs["gitSparseCheckoutPaths"] = state?.gitSparseCheckoutPaths;
            resourceInputs["githubEnterprise"] = state?.githubEnterprise;
            resourceInputs["gitlab"] = state?.gitlab;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["moduleId"] = state?.moduleId;
            resourceInputs["name"] = state?.name;
            resourceInputs["projectRoot"] = state?.projectRoot;
            resourceInputs["protectFromDeletion"] = state?.protectFromDeletion;
            resourceInputs["public"] = state?.public;
            resourceInputs["rawGit"] = state?.rawGit;
            resourceInputs["repository"] = state?.repository;
            resourceInputs["runnerImage"] = state?.runnerImage;
            resourceInputs["sharedAccounts"] = state?.sharedAccounts;
            resourceInputs["spaceId"] = state?.spaceId;
            resourceInputs["terraformProvider"] = state?.terraformProvider;
            resourceInputs["workerPoolId"] = state?.workerPoolId;
            resourceInputs["workflowTool"] = state?.workflowTool;
        } else {
            const args = argsOrState as ModuleArgs | undefined;
            if (args?.branch === undefined && !opts.urn) {
                throw new Error("Missing required property 'branch'");
            }
            if (args?.repository === undefined && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            resourceInputs["administrative"] = args?.administrative;
            resourceInputs["azureDevops"] = args?.azureDevops;
            resourceInputs["bitbucketCloud"] = args?.bitbucketCloud;
            resourceInputs["bitbucketDatacenter"] = args?.bitbucketDatacenter;
            resourceInputs["branch"] = args?.branch;
            resourceInputs["description"] = args?.description;
            resourceInputs["enableLocalPreview"] = args?.enableLocalPreview;
            resourceInputs["gitSparseCheckoutPaths"] = args?.gitSparseCheckoutPaths;
            resourceInputs["githubEnterprise"] = args?.githubEnterprise;
            resourceInputs["gitlab"] = args?.gitlab;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["moduleId"] = args?.moduleId;
            resourceInputs["name"] = args?.name;
            resourceInputs["projectRoot"] = args?.projectRoot;
            resourceInputs["protectFromDeletion"] = args?.protectFromDeletion;
            resourceInputs["public"] = args?.public;
            resourceInputs["rawGit"] = args?.rawGit;
            resourceInputs["repository"] = args?.repository;
            resourceInputs["runnerImage"] = args?.runnerImage;
            resourceInputs["sharedAccounts"] = args?.sharedAccounts;
            resourceInputs["spaceId"] = args?.spaceId;
            resourceInputs["terraformProvider"] = args?.terraformProvider;
            resourceInputs["workerPoolId"] = args?.workerPoolId;
            resourceInputs["workflowTool"] = args?.workflowTool;
            resourceInputs["awsAssumeRolePolicyStatement"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Module.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Module resources.
 */
export interface ModuleState {
    /**
     * Indicates whether this module can manage others. Defaults to `false`.
     */
    administrative?: pulumi.Input<boolean>;
    /**
     * AWS IAM assume role policy statement setting up trust relationship
     */
    awsAssumeRolePolicyStatement?: pulumi.Input<string>;
    /**
     * Azure DevOps VCS settings
     */
    azureDevops?: pulumi.Input<inputs.ModuleAzureDevops>;
    /**
     * Bitbucket Cloud VCS settings
     */
    bitbucketCloud?: pulumi.Input<inputs.ModuleBitbucketCloud>;
    /**
     * Bitbucket Datacenter VCS settings
     */
    bitbucketDatacenter?: pulumi.Input<inputs.ModuleBitbucketDatacenter>;
    /**
     * GitHub branch to apply changes to
     */
    branch?: pulumi.Input<string>;
    /**
     * Free-form module description for users
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether local preview versions can be triggered on this Module. Defaults to `false`.
     */
    enableLocalPreview?: pulumi.Input<boolean>;
    /**
     * Git sparse checkout paths is an optional list of paths to use for sparse checkout. If not set, the entire repository
     * will be checked out.
     */
    gitSparseCheckoutPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * GitHub Enterprise (self-hosted) VCS settings
     */
    githubEnterprise?: pulumi.Input<inputs.ModuleGithubEnterprise>;
    /**
     * GitLab VCS settings
     */
    gitlab?: pulumi.Input<inputs.ModuleGitlab>;
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    moduleId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Project root is the optional directory relative to the repository root containing the module source code.
     */
    projectRoot?: pulumi.Input<string>;
    /**
     * Protect this module from accidental deletion. If set, attempts to delete this module will fail. Defaults to `false`.
     */
    protectFromDeletion?: pulumi.Input<boolean>;
    /**
     * Make this module publicly accessible. Can only be set at creation time. Defaults to `false`.
     */
    public?: pulumi.Input<boolean>;
    /**
     * One-way VCS integration using a raw Git repository link
     */
    rawGit?: pulumi.Input<inputs.ModuleRawGit>;
    /**
     * Name of the repository, without the owner part
     */
    repository?: pulumi.Input<string>;
    /**
     * Name of the Docker image used to process Runs
     */
    runnerImage?: pulumi.Input<string>;
    /**
     * List of the accounts (subdomains) which should have access to the Module
     */
    sharedAccounts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID (slug) of the space the module is in
     */
    spaceId?: pulumi.Input<string>;
    terraformProvider?: pulumi.Input<string>;
    /**
     * ID of the worker pool to use. NOTE: worker_pool_id is required when using a self-hosted instance of Spacelift.
     */
    workerPoolId?: pulumi.Input<string>;
    /**
     * Defines the tool that will be used to execute the workflow. This can be one of `OPEN_TOFU`, `TERRAFORM_FOSS` or
     * `CUSTOM`. Defaults to `TERRAFORM_FOSS`.
     */
    workflowTool?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Module resource.
 */
export interface ModuleArgs {
    /**
     * Indicates whether this module can manage others. Defaults to `false`.
     */
    administrative?: pulumi.Input<boolean>;
    /**
     * Azure DevOps VCS settings
     */
    azureDevops?: pulumi.Input<inputs.ModuleAzureDevops>;
    /**
     * Bitbucket Cloud VCS settings
     */
    bitbucketCloud?: pulumi.Input<inputs.ModuleBitbucketCloud>;
    /**
     * Bitbucket Datacenter VCS settings
     */
    bitbucketDatacenter?: pulumi.Input<inputs.ModuleBitbucketDatacenter>;
    /**
     * GitHub branch to apply changes to
     */
    branch: pulumi.Input<string>;
    /**
     * Free-form module description for users
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether local preview versions can be triggered on this Module. Defaults to `false`.
     */
    enableLocalPreview?: pulumi.Input<boolean>;
    /**
     * Git sparse checkout paths is an optional list of paths to use for sparse checkout. If not set, the entire repository
     * will be checked out.
     */
    gitSparseCheckoutPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * GitHub Enterprise (self-hosted) VCS settings
     */
    githubEnterprise?: pulumi.Input<inputs.ModuleGithubEnterprise>;
    /**
     * GitLab VCS settings
     */
    gitlab?: pulumi.Input<inputs.ModuleGitlab>;
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    moduleId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Project root is the optional directory relative to the repository root containing the module source code.
     */
    projectRoot?: pulumi.Input<string>;
    /**
     * Protect this module from accidental deletion. If set, attempts to delete this module will fail. Defaults to `false`.
     */
    protectFromDeletion?: pulumi.Input<boolean>;
    /**
     * Make this module publicly accessible. Can only be set at creation time. Defaults to `false`.
     */
    public?: pulumi.Input<boolean>;
    /**
     * One-way VCS integration using a raw Git repository link
     */
    rawGit?: pulumi.Input<inputs.ModuleRawGit>;
    /**
     * Name of the repository, without the owner part
     */
    repository: pulumi.Input<string>;
    /**
     * Name of the Docker image used to process Runs
     */
    runnerImage?: pulumi.Input<string>;
    /**
     * List of the accounts (subdomains) which should have access to the Module
     */
    sharedAccounts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID (slug) of the space the module is in
     */
    spaceId?: pulumi.Input<string>;
    terraformProvider?: pulumi.Input<string>;
    /**
     * ID of the worker pool to use. NOTE: worker_pool_id is required when using a self-hosted instance of Spacelift.
     */
    workerPoolId?: pulumi.Input<string>;
    /**
     * Defines the tool that will be used to execute the workflow. This can be one of `OPEN_TOFU`, `TERRAFORM_FOSS` or
     * `CUSTOM`. Defaults to `TERRAFORM_FOSS`.
     */
    workflowTool?: pulumi.Input<string>;
}

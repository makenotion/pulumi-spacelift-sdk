// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AzureIntegrationAttachment extends pulumi.CustomResource {
    /**
     * Get an existing AzureIntegrationAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzureIntegrationAttachmentState, opts?: pulumi.CustomResourceOptions): AzureIntegrationAttachment {
        return new AzureIntegrationAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spacelift-terraform-provider:index/azureIntegrationAttachment:AzureIntegrationAttachment';

    /**
     * Returns true if the given object is an instance of AzureIntegrationAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzureIntegrationAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzureIntegrationAttachment.__pulumiType;
    }

    /**
     * Internal ID of the attachment entity
     */
    declare public /*out*/ readonly attachmentId: pulumi.Output<string>;
    declare public readonly azureIntegrationAttachmentId: pulumi.Output<string>;
    /**
     * ID of the integration to attach
     */
    declare public readonly integrationId: pulumi.Output<string>;
    /**
     * ID of the module to attach the integration to
     */
    declare public readonly moduleId: pulumi.Output<string | undefined>;
    /**
     * Indicates whether this attachment is used for read operations. Defaults to `true`.
     */
    declare public readonly read: pulumi.Output<boolean | undefined>;
    /**
     * ID of the stack to attach the integration to
     */
    declare public readonly stackId: pulumi.Output<string | undefined>;
    /**
     * Contains the Azure subscription ID to use with this Stack. Overrides the default subscription ID set at the integration
     * level.
     */
    declare public readonly subscriptionId: pulumi.Output<string | undefined>;
    /**
     * Indicates whether this attachment is used for write operations. Defaults to `true`.
     */
    declare public readonly write: pulumi.Output<boolean | undefined>;

    /**
     * Create a AzureIntegrationAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzureIntegrationAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzureIntegrationAttachmentArgs | AzureIntegrationAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzureIntegrationAttachmentState | undefined;
            resourceInputs["attachmentId"] = state?.attachmentId;
            resourceInputs["azureIntegrationAttachmentId"] = state?.azureIntegrationAttachmentId;
            resourceInputs["integrationId"] = state?.integrationId;
            resourceInputs["moduleId"] = state?.moduleId;
            resourceInputs["read"] = state?.read;
            resourceInputs["stackId"] = state?.stackId;
            resourceInputs["subscriptionId"] = state?.subscriptionId;
            resourceInputs["write"] = state?.write;
        } else {
            const args = argsOrState as AzureIntegrationAttachmentArgs | undefined;
            if (args?.integrationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'integrationId'");
            }
            resourceInputs["azureIntegrationAttachmentId"] = args?.azureIntegrationAttachmentId;
            resourceInputs["integrationId"] = args?.integrationId;
            resourceInputs["moduleId"] = args?.moduleId;
            resourceInputs["read"] = args?.read;
            resourceInputs["stackId"] = args?.stackId;
            resourceInputs["subscriptionId"] = args?.subscriptionId;
            resourceInputs["write"] = args?.write;
            resourceInputs["attachmentId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AzureIntegrationAttachment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AzureIntegrationAttachment resources.
 */
export interface AzureIntegrationAttachmentState {
    /**
     * Internal ID of the attachment entity
     */
    attachmentId?: pulumi.Input<string>;
    azureIntegrationAttachmentId?: pulumi.Input<string>;
    /**
     * ID of the integration to attach
     */
    integrationId?: pulumi.Input<string>;
    /**
     * ID of the module to attach the integration to
     */
    moduleId?: pulumi.Input<string>;
    /**
     * Indicates whether this attachment is used for read operations. Defaults to `true`.
     */
    read?: pulumi.Input<boolean>;
    /**
     * ID of the stack to attach the integration to
     */
    stackId?: pulumi.Input<string>;
    /**
     * Contains the Azure subscription ID to use with this Stack. Overrides the default subscription ID set at the integration
     * level.
     */
    subscriptionId?: pulumi.Input<string>;
    /**
     * Indicates whether this attachment is used for write operations. Defaults to `true`.
     */
    write?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AzureIntegrationAttachment resource.
 */
export interface AzureIntegrationAttachmentArgs {
    azureIntegrationAttachmentId?: pulumi.Input<string>;
    /**
     * ID of the integration to attach
     */
    integrationId: pulumi.Input<string>;
    /**
     * ID of the module to attach the integration to
     */
    moduleId?: pulumi.Input<string>;
    /**
     * Indicates whether this attachment is used for read operations. Defaults to `true`.
     */
    read?: pulumi.Input<boolean>;
    /**
     * ID of the stack to attach the integration to
     */
    stackId?: pulumi.Input<string>;
    /**
     * Contains the Azure subscription ID to use with this Stack. Overrides the default subscription ID set at the integration
     * level.
     */
    subscriptionId?: pulumi.Input<string>;
    /**
     * Indicates whether this attachment is used for write operations. Defaults to `true`.
     */
    write?: pulumi.Input<boolean>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Stack extends pulumi.CustomResource {
    /**
     * Get an existing Stack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StackState, opts?: pulumi.CustomResourceOptions): Stack {
        return new Stack(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spacelift-terraform-provider:index/stack:Stack';

    /**
     * Returns true if the given object is an instance of Stack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Stack {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Stack.__pulumiType;
    }

    /**
     * Project globs is an optional list of paths to track changes of in addition to the project root.
     */
    declare public readonly additionalProjectGlobs: pulumi.Output<string[] | undefined>;
    /**
     * Indicates whether this stack can manage others. Defaults to `false`.
     */
    declare public readonly administrative: pulumi.Output<boolean | undefined>;
    /**
     * List of after-apply scripts
     */
    declare public readonly afterApplies: pulumi.Output<string[] | undefined>;
    /**
     * List of after-destroy scripts
     */
    declare public readonly afterDestroys: pulumi.Output<string[] | undefined>;
    /**
     * List of after-init scripts
     */
    declare public readonly afterInits: pulumi.Output<string[] | undefined>;
    /**
     * List of after-perform scripts
     */
    declare public readonly afterPerforms: pulumi.Output<string[] | undefined>;
    /**
     * List of after-plan scripts
     */
    declare public readonly afterPlans: pulumi.Output<string[] | undefined>;
    /**
     * List of after-run scripts
     */
    declare public readonly afterRuns: pulumi.Output<string[] | undefined>;
    /**
     * Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
     */
    declare public readonly ansible: pulumi.Output<outputs.StackAnsible | undefined>;
    /**
     * Indicates whether changes to this stack can be automatically deployed. Defaults to `false`.
     */
    declare public readonly autodeploy: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether obsolete proposed changes should automatically be retried. Defaults to `false`.
     */
    declare public readonly autoretry: pulumi.Output<boolean | undefined>;
    /**
     * AWS IAM assume role policy statement setting up trust relationship
     */
    declare public /*out*/ readonly awsAssumeRolePolicyStatement: pulumi.Output<string>;
    /**
     * Azure DevOps VCS settings
     */
    declare public readonly azureDevops: pulumi.Output<outputs.StackAzureDevops | undefined>;
    /**
     * List of before-apply scripts
     */
    declare public readonly beforeApplies: pulumi.Output<string[] | undefined>;
    /**
     * List of before-destroy scripts
     */
    declare public readonly beforeDestroys: pulumi.Output<string[] | undefined>;
    /**
     * List of before-init scripts
     */
    declare public readonly beforeInits: pulumi.Output<string[] | undefined>;
    /**
     * List of before-perform scripts
     */
    declare public readonly beforePerforms: pulumi.Output<string[] | undefined>;
    /**
     * List of before-plan scripts
     */
    declare public readonly beforePlans: pulumi.Output<string[] | undefined>;
    /**
     * Bitbucket Cloud VCS settings
     */
    declare public readonly bitbucketCloud: pulumi.Output<outputs.StackBitbucketCloud | undefined>;
    /**
     * Bitbucket Datacenter VCS settings
     */
    declare public readonly bitbucketDatacenter: pulumi.Output<outputs.StackBitbucketDatacenter | undefined>;
    /**
     * Git branch to apply changes to
     */
    declare public readonly branch: pulumi.Output<string>;
    /**
     * CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
     */
    declare public readonly cloudformation: pulumi.Output<outputs.StackCloudformation | undefined>;
    /**
     * Free-form stack description for users
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Indicates whether local preview runs can be triggered on this Stack. Defaults to `false`.
     */
    declare public readonly enableLocalPreview: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether sensitive outputs created by this stack can be uploaded to Spacelift to be used by Stack Dependency
     * references. Triggered only when corresponding option is enabled on the Worker Pool used by the Stack as well. Defaults
     * to `true`.
     */
    declare public readonly enableSensitiveOutputsUpload: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether well-known secret masking is enabled.
     */
    declare public readonly enableWellKnownSecretMasking: pulumi.Output<boolean | undefined>;
    /**
     * Git sparse checkout paths is an optional list of paths to use for sparse checkout. If not set, the entire repository
     * will be checked out.
     */
    declare public readonly gitSparseCheckoutPaths: pulumi.Output<string[] | undefined>;
    /**
     * Indicates whether GitHub users can deploy from the Checks API. Defaults to `true`. This is called allow run promotion in
     * the UI.
     */
    declare public readonly githubActionDeploy: pulumi.Output<boolean | undefined>;
    /**
     * VCS settings for [GitHub custom
     * application](https://docs.spacelift.io/integrations/source-control/github#setting-up-the-custom-application)
     */
    declare public readonly githubEnterprise: pulumi.Output<outputs.StackGithubEnterprise | undefined>;
    /**
     * GitLab VCS settings
     */
    declare public readonly gitlab: pulumi.Output<outputs.StackGitlab | undefined>;
    /**
     * State file to upload when creating a new stack
     */
    declare public readonly importState: pulumi.Output<string | undefined>;
    /**
     * Path to the state file to upload when creating a new stack
     */
    declare public readonly importStateFile: pulumi.Output<string | undefined>;
    /**
     * Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
     */
    declare public readonly kubernetes: pulumi.Output<outputs.StackKubernetes | undefined>;
    declare public readonly labels: pulumi.Output<string[] | undefined>;
    /**
     * Determines if Spacelift should manage state for this stack. Defaults to `true`.
     */
    declare public readonly manageState: pulumi.Output<boolean | undefined>;
    /**
     * Name of the stack - should be unique in one account
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
     */
    declare public readonly projectRoot: pulumi.Output<string | undefined>;
    /**
     * Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to `false`.
     */
    declare public readonly protectFromDeletion: pulumi.Output<boolean | undefined>;
    /**
     * Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
     */
    declare public readonly pulumiInfo: pulumi.Output<outputs.StackPulumiInfo | undefined>;
    /**
     * One-way VCS integration using a raw Git repository link
     */
    declare public readonly rawGit: pulumi.Output<outputs.StackRawGit | undefined>;
    /**
     * Name of the repository, without the owner part
     */
    declare public readonly repository: pulumi.Output<string>;
    /**
     * Name of the Docker image used to process Runs
     */
    declare public readonly runnerImage: pulumi.Output<string | undefined>;
    declare public readonly showcase: pulumi.Output<outputs.StackShowcase | undefined>;
    /**
     * Allows setting the custom ID (slug) for the stack
     */
    declare public readonly slug: pulumi.Output<string>;
    /**
     * ID (slug) of the space the stack is in. Defaults to `legacy` if it exists, otherwise `root`.
     */
    declare public readonly spaceId: pulumi.Output<string>;
    declare public readonly stackId: pulumi.Output<string>;
    /**
     * Indicates whether you can access the Stack state file from other stacks or outside of Spacelift. Defaults to `false`.
     */
    declare public readonly terraformExternalStateAccess: pulumi.Output<boolean | undefined>;
    declare public readonly terraformSmartSanitization: pulumi.Output<boolean | undefined>;
    declare public readonly terraformVersion: pulumi.Output<string>;
    /**
     * Defines the tool that will be used to execute the workflow. This can be one of `OPEN_TOFU`, `TERRAFORM_FOSS` or
     * `CUSTOM`. Defaults to `TERRAFORM_FOSS`.
     */
    declare public readonly terraformWorkflowTool: pulumi.Output<string>;
    declare public readonly terraformWorkspace: pulumi.Output<string | undefined>;
    /**
     * Terragrunt-specific configuration. Presence means this Stack is an Terragrunt Stack.
     */
    declare public readonly terragrunt: pulumi.Output<outputs.StackTerragrunt | undefined>;
    /**
     * ID of the worker pool to use. NOTE: worker_pool_id is required when using a self-hosted instance of Spacelift.
     */
    declare public readonly workerPoolId: pulumi.Output<string | undefined>;

    /**
     * Create a Stack resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StackArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StackArgs | StackState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StackState | undefined;
            resourceInputs["additionalProjectGlobs"] = state?.additionalProjectGlobs;
            resourceInputs["administrative"] = state?.administrative;
            resourceInputs["afterApplies"] = state?.afterApplies;
            resourceInputs["afterDestroys"] = state?.afterDestroys;
            resourceInputs["afterInits"] = state?.afterInits;
            resourceInputs["afterPerforms"] = state?.afterPerforms;
            resourceInputs["afterPlans"] = state?.afterPlans;
            resourceInputs["afterRuns"] = state?.afterRuns;
            resourceInputs["ansible"] = state?.ansible;
            resourceInputs["autodeploy"] = state?.autodeploy;
            resourceInputs["autoretry"] = state?.autoretry;
            resourceInputs["awsAssumeRolePolicyStatement"] = state?.awsAssumeRolePolicyStatement;
            resourceInputs["azureDevops"] = state?.azureDevops;
            resourceInputs["beforeApplies"] = state?.beforeApplies;
            resourceInputs["beforeDestroys"] = state?.beforeDestroys;
            resourceInputs["beforeInits"] = state?.beforeInits;
            resourceInputs["beforePerforms"] = state?.beforePerforms;
            resourceInputs["beforePlans"] = state?.beforePlans;
            resourceInputs["bitbucketCloud"] = state?.bitbucketCloud;
            resourceInputs["bitbucketDatacenter"] = state?.bitbucketDatacenter;
            resourceInputs["branch"] = state?.branch;
            resourceInputs["cloudformation"] = state?.cloudformation;
            resourceInputs["description"] = state?.description;
            resourceInputs["enableLocalPreview"] = state?.enableLocalPreview;
            resourceInputs["enableSensitiveOutputsUpload"] = state?.enableSensitiveOutputsUpload;
            resourceInputs["enableWellKnownSecretMasking"] = state?.enableWellKnownSecretMasking;
            resourceInputs["gitSparseCheckoutPaths"] = state?.gitSparseCheckoutPaths;
            resourceInputs["githubActionDeploy"] = state?.githubActionDeploy;
            resourceInputs["githubEnterprise"] = state?.githubEnterprise;
            resourceInputs["gitlab"] = state?.gitlab;
            resourceInputs["importState"] = state?.importState;
            resourceInputs["importStateFile"] = state?.importStateFile;
            resourceInputs["kubernetes"] = state?.kubernetes;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["manageState"] = state?.manageState;
            resourceInputs["name"] = state?.name;
            resourceInputs["projectRoot"] = state?.projectRoot;
            resourceInputs["protectFromDeletion"] = state?.protectFromDeletion;
            resourceInputs["pulumiInfo"] = state?.pulumiInfo;
            resourceInputs["rawGit"] = state?.rawGit;
            resourceInputs["repository"] = state?.repository;
            resourceInputs["runnerImage"] = state?.runnerImage;
            resourceInputs["showcase"] = state?.showcase;
            resourceInputs["slug"] = state?.slug;
            resourceInputs["spaceId"] = state?.spaceId;
            resourceInputs["stackId"] = state?.stackId;
            resourceInputs["terraformExternalStateAccess"] = state?.terraformExternalStateAccess;
            resourceInputs["terraformSmartSanitization"] = state?.terraformSmartSanitization;
            resourceInputs["terraformVersion"] = state?.terraformVersion;
            resourceInputs["terraformWorkflowTool"] = state?.terraformWorkflowTool;
            resourceInputs["terraformWorkspace"] = state?.terraformWorkspace;
            resourceInputs["terragrunt"] = state?.terragrunt;
            resourceInputs["workerPoolId"] = state?.workerPoolId;
        } else {
            const args = argsOrState as StackArgs | undefined;
            if (args?.branch === undefined && !opts.urn) {
                throw new Error("Missing required property 'branch'");
            }
            if (args?.repository === undefined && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            resourceInputs["additionalProjectGlobs"] = args?.additionalProjectGlobs;
            resourceInputs["administrative"] = args?.administrative;
            resourceInputs["afterApplies"] = args?.afterApplies;
            resourceInputs["afterDestroys"] = args?.afterDestroys;
            resourceInputs["afterInits"] = args?.afterInits;
            resourceInputs["afterPerforms"] = args?.afterPerforms;
            resourceInputs["afterPlans"] = args?.afterPlans;
            resourceInputs["afterRuns"] = args?.afterRuns;
            resourceInputs["ansible"] = args?.ansible;
            resourceInputs["autodeploy"] = args?.autodeploy;
            resourceInputs["autoretry"] = args?.autoretry;
            resourceInputs["azureDevops"] = args?.azureDevops;
            resourceInputs["beforeApplies"] = args?.beforeApplies;
            resourceInputs["beforeDestroys"] = args?.beforeDestroys;
            resourceInputs["beforeInits"] = args?.beforeInits;
            resourceInputs["beforePerforms"] = args?.beforePerforms;
            resourceInputs["beforePlans"] = args?.beforePlans;
            resourceInputs["bitbucketCloud"] = args?.bitbucketCloud;
            resourceInputs["bitbucketDatacenter"] = args?.bitbucketDatacenter;
            resourceInputs["branch"] = args?.branch;
            resourceInputs["cloudformation"] = args?.cloudformation;
            resourceInputs["description"] = args?.description;
            resourceInputs["enableLocalPreview"] = args?.enableLocalPreview;
            resourceInputs["enableSensitiveOutputsUpload"] = args?.enableSensitiveOutputsUpload;
            resourceInputs["enableWellKnownSecretMasking"] = args?.enableWellKnownSecretMasking;
            resourceInputs["gitSparseCheckoutPaths"] = args?.gitSparseCheckoutPaths;
            resourceInputs["githubActionDeploy"] = args?.githubActionDeploy;
            resourceInputs["githubEnterprise"] = args?.githubEnterprise;
            resourceInputs["gitlab"] = args?.gitlab;
            resourceInputs["importState"] = args?.importState ? pulumi.secret(args.importState) : undefined;
            resourceInputs["importStateFile"] = args?.importStateFile;
            resourceInputs["kubernetes"] = args?.kubernetes;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["manageState"] = args?.manageState;
            resourceInputs["name"] = args?.name;
            resourceInputs["projectRoot"] = args?.projectRoot;
            resourceInputs["protectFromDeletion"] = args?.protectFromDeletion;
            resourceInputs["pulumiInfo"] = args?.pulumiInfo;
            resourceInputs["rawGit"] = args?.rawGit;
            resourceInputs["repository"] = args?.repository;
            resourceInputs["runnerImage"] = args?.runnerImage;
            resourceInputs["showcase"] = args?.showcase;
            resourceInputs["slug"] = args?.slug;
            resourceInputs["spaceId"] = args?.spaceId;
            resourceInputs["stackId"] = args?.stackId;
            resourceInputs["terraformExternalStateAccess"] = args?.terraformExternalStateAccess;
            resourceInputs["terraformSmartSanitization"] = args?.terraformSmartSanitization;
            resourceInputs["terraformVersion"] = args?.terraformVersion;
            resourceInputs["terraformWorkflowTool"] = args?.terraformWorkflowTool;
            resourceInputs["terraformWorkspace"] = args?.terraformWorkspace;
            resourceInputs["terragrunt"] = args?.terragrunt;
            resourceInputs["workerPoolId"] = args?.workerPoolId;
            resourceInputs["awsAssumeRolePolicyStatement"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["importState"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Stack.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Stack resources.
 */
export interface StackState {
    /**
     * Project globs is an optional list of paths to track changes of in addition to the project root.
     */
    additionalProjectGlobs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether this stack can manage others. Defaults to `false`.
     */
    administrative?: pulumi.Input<boolean>;
    /**
     * List of after-apply scripts
     */
    afterApplies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of after-destroy scripts
     */
    afterDestroys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of after-init scripts
     */
    afterInits?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of after-perform scripts
     */
    afterPerforms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of after-plan scripts
     */
    afterPlans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of after-run scripts
     */
    afterRuns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
     */
    ansible?: pulumi.Input<inputs.StackAnsible>;
    /**
     * Indicates whether changes to this stack can be automatically deployed. Defaults to `false`.
     */
    autodeploy?: pulumi.Input<boolean>;
    /**
     * Indicates whether obsolete proposed changes should automatically be retried. Defaults to `false`.
     */
    autoretry?: pulumi.Input<boolean>;
    /**
     * AWS IAM assume role policy statement setting up trust relationship
     */
    awsAssumeRolePolicyStatement?: pulumi.Input<string>;
    /**
     * Azure DevOps VCS settings
     */
    azureDevops?: pulumi.Input<inputs.StackAzureDevops>;
    /**
     * List of before-apply scripts
     */
    beforeApplies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of before-destroy scripts
     */
    beforeDestroys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of before-init scripts
     */
    beforeInits?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of before-perform scripts
     */
    beforePerforms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of before-plan scripts
     */
    beforePlans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Bitbucket Cloud VCS settings
     */
    bitbucketCloud?: pulumi.Input<inputs.StackBitbucketCloud>;
    /**
     * Bitbucket Datacenter VCS settings
     */
    bitbucketDatacenter?: pulumi.Input<inputs.StackBitbucketDatacenter>;
    /**
     * Git branch to apply changes to
     */
    branch?: pulumi.Input<string>;
    /**
     * CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
     */
    cloudformation?: pulumi.Input<inputs.StackCloudformation>;
    /**
     * Free-form stack description for users
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether local preview runs can be triggered on this Stack. Defaults to `false`.
     */
    enableLocalPreview?: pulumi.Input<boolean>;
    /**
     * Indicates whether sensitive outputs created by this stack can be uploaded to Spacelift to be used by Stack Dependency
     * references. Triggered only when corresponding option is enabled on the Worker Pool used by the Stack as well. Defaults
     * to `true`.
     */
    enableSensitiveOutputsUpload?: pulumi.Input<boolean>;
    /**
     * Indicates whether well-known secret masking is enabled.
     */
    enableWellKnownSecretMasking?: pulumi.Input<boolean>;
    /**
     * Git sparse checkout paths is an optional list of paths to use for sparse checkout. If not set, the entire repository
     * will be checked out.
     */
    gitSparseCheckoutPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether GitHub users can deploy from the Checks API. Defaults to `true`. This is called allow run promotion in
     * the UI.
     */
    githubActionDeploy?: pulumi.Input<boolean>;
    /**
     * VCS settings for [GitHub custom
     * application](https://docs.spacelift.io/integrations/source-control/github#setting-up-the-custom-application)
     */
    githubEnterprise?: pulumi.Input<inputs.StackGithubEnterprise>;
    /**
     * GitLab VCS settings
     */
    gitlab?: pulumi.Input<inputs.StackGitlab>;
    /**
     * State file to upload when creating a new stack
     */
    importState?: pulumi.Input<string>;
    /**
     * Path to the state file to upload when creating a new stack
     */
    importStateFile?: pulumi.Input<string>;
    /**
     * Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
     */
    kubernetes?: pulumi.Input<inputs.StackKubernetes>;
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Determines if Spacelift should manage state for this stack. Defaults to `true`.
     */
    manageState?: pulumi.Input<boolean>;
    /**
     * Name of the stack - should be unique in one account
     */
    name?: pulumi.Input<string>;
    /**
     * Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
     */
    projectRoot?: pulumi.Input<string>;
    /**
     * Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to `false`.
     */
    protectFromDeletion?: pulumi.Input<boolean>;
    /**
     * Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
     */
    pulumiInfo?: pulumi.Input<inputs.StackPulumiInfo>;
    /**
     * One-way VCS integration using a raw Git repository link
     */
    rawGit?: pulumi.Input<inputs.StackRawGit>;
    /**
     * Name of the repository, without the owner part
     */
    repository?: pulumi.Input<string>;
    /**
     * Name of the Docker image used to process Runs
     */
    runnerImage?: pulumi.Input<string>;
    showcase?: pulumi.Input<inputs.StackShowcase>;
    /**
     * Allows setting the custom ID (slug) for the stack
     */
    slug?: pulumi.Input<string>;
    /**
     * ID (slug) of the space the stack is in. Defaults to `legacy` if it exists, otherwise `root`.
     */
    spaceId?: pulumi.Input<string>;
    stackId?: pulumi.Input<string>;
    /**
     * Indicates whether you can access the Stack state file from other stacks or outside of Spacelift. Defaults to `false`.
     */
    terraformExternalStateAccess?: pulumi.Input<boolean>;
    terraformSmartSanitization?: pulumi.Input<boolean>;
    terraformVersion?: pulumi.Input<string>;
    /**
     * Defines the tool that will be used to execute the workflow. This can be one of `OPEN_TOFU`, `TERRAFORM_FOSS` or
     * `CUSTOM`. Defaults to `TERRAFORM_FOSS`.
     */
    terraformWorkflowTool?: pulumi.Input<string>;
    terraformWorkspace?: pulumi.Input<string>;
    /**
     * Terragrunt-specific configuration. Presence means this Stack is an Terragrunt Stack.
     */
    terragrunt?: pulumi.Input<inputs.StackTerragrunt>;
    /**
     * ID of the worker pool to use. NOTE: worker_pool_id is required when using a self-hosted instance of Spacelift.
     */
    workerPoolId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Stack resource.
 */
export interface StackArgs {
    /**
     * Project globs is an optional list of paths to track changes of in addition to the project root.
     */
    additionalProjectGlobs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether this stack can manage others. Defaults to `false`.
     */
    administrative?: pulumi.Input<boolean>;
    /**
     * List of after-apply scripts
     */
    afterApplies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of after-destroy scripts
     */
    afterDestroys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of after-init scripts
     */
    afterInits?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of after-perform scripts
     */
    afterPerforms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of after-plan scripts
     */
    afterPlans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of after-run scripts
     */
    afterRuns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
     */
    ansible?: pulumi.Input<inputs.StackAnsible>;
    /**
     * Indicates whether changes to this stack can be automatically deployed. Defaults to `false`.
     */
    autodeploy?: pulumi.Input<boolean>;
    /**
     * Indicates whether obsolete proposed changes should automatically be retried. Defaults to `false`.
     */
    autoretry?: pulumi.Input<boolean>;
    /**
     * Azure DevOps VCS settings
     */
    azureDevops?: pulumi.Input<inputs.StackAzureDevops>;
    /**
     * List of before-apply scripts
     */
    beforeApplies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of before-destroy scripts
     */
    beforeDestroys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of before-init scripts
     */
    beforeInits?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of before-perform scripts
     */
    beforePerforms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of before-plan scripts
     */
    beforePlans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Bitbucket Cloud VCS settings
     */
    bitbucketCloud?: pulumi.Input<inputs.StackBitbucketCloud>;
    /**
     * Bitbucket Datacenter VCS settings
     */
    bitbucketDatacenter?: pulumi.Input<inputs.StackBitbucketDatacenter>;
    /**
     * Git branch to apply changes to
     */
    branch: pulumi.Input<string>;
    /**
     * CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
     */
    cloudformation?: pulumi.Input<inputs.StackCloudformation>;
    /**
     * Free-form stack description for users
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether local preview runs can be triggered on this Stack. Defaults to `false`.
     */
    enableLocalPreview?: pulumi.Input<boolean>;
    /**
     * Indicates whether sensitive outputs created by this stack can be uploaded to Spacelift to be used by Stack Dependency
     * references. Triggered only when corresponding option is enabled on the Worker Pool used by the Stack as well. Defaults
     * to `true`.
     */
    enableSensitiveOutputsUpload?: pulumi.Input<boolean>;
    /**
     * Indicates whether well-known secret masking is enabled.
     */
    enableWellKnownSecretMasking?: pulumi.Input<boolean>;
    /**
     * Git sparse checkout paths is an optional list of paths to use for sparse checkout. If not set, the entire repository
     * will be checked out.
     */
    gitSparseCheckoutPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether GitHub users can deploy from the Checks API. Defaults to `true`. This is called allow run promotion in
     * the UI.
     */
    githubActionDeploy?: pulumi.Input<boolean>;
    /**
     * VCS settings for [GitHub custom
     * application](https://docs.spacelift.io/integrations/source-control/github#setting-up-the-custom-application)
     */
    githubEnterprise?: pulumi.Input<inputs.StackGithubEnterprise>;
    /**
     * GitLab VCS settings
     */
    gitlab?: pulumi.Input<inputs.StackGitlab>;
    /**
     * State file to upload when creating a new stack
     */
    importState?: pulumi.Input<string>;
    /**
     * Path to the state file to upload when creating a new stack
     */
    importStateFile?: pulumi.Input<string>;
    /**
     * Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
     */
    kubernetes?: pulumi.Input<inputs.StackKubernetes>;
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Determines if Spacelift should manage state for this stack. Defaults to `true`.
     */
    manageState?: pulumi.Input<boolean>;
    /**
     * Name of the stack - should be unique in one account
     */
    name?: pulumi.Input<string>;
    /**
     * Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
     */
    projectRoot?: pulumi.Input<string>;
    /**
     * Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to `false`.
     */
    protectFromDeletion?: pulumi.Input<boolean>;
    /**
     * Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
     */
    pulumiInfo?: pulumi.Input<inputs.StackPulumiInfo>;
    /**
     * One-way VCS integration using a raw Git repository link
     */
    rawGit?: pulumi.Input<inputs.StackRawGit>;
    /**
     * Name of the repository, without the owner part
     */
    repository: pulumi.Input<string>;
    /**
     * Name of the Docker image used to process Runs
     */
    runnerImage?: pulumi.Input<string>;
    showcase?: pulumi.Input<inputs.StackShowcase>;
    /**
     * Allows setting the custom ID (slug) for the stack
     */
    slug?: pulumi.Input<string>;
    /**
     * ID (slug) of the space the stack is in. Defaults to `legacy` if it exists, otherwise `root`.
     */
    spaceId?: pulumi.Input<string>;
    stackId?: pulumi.Input<string>;
    /**
     * Indicates whether you can access the Stack state file from other stacks or outside of Spacelift. Defaults to `false`.
     */
    terraformExternalStateAccess?: pulumi.Input<boolean>;
    terraformSmartSanitization?: pulumi.Input<boolean>;
    terraformVersion?: pulumi.Input<string>;
    /**
     * Defines the tool that will be used to execute the workflow. This can be one of `OPEN_TOFU`, `TERRAFORM_FOSS` or
     * `CUSTOM`. Defaults to `TERRAFORM_FOSS`.
     */
    terraformWorkflowTool?: pulumi.Input<string>;
    terraformWorkspace?: pulumi.Input<string>;
    /**
     * Terragrunt-specific configuration. Presence means this Stack is an Terragrunt Stack.
     */
    terragrunt?: pulumi.Input<inputs.StackTerragrunt>;
    /**
     * ID of the worker pool to use. NOTE: worker_pool_id is required when using a self-hosted instance of Spacelift.
     */
    workerPoolId?: pulumi.Input<string>;
}

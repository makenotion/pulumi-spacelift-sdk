// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ScheduledRun extends pulumi.CustomResource {
    /**
     * Get an existing ScheduledRun resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScheduledRunState, opts?: pulumi.CustomResourceOptions): ScheduledRun {
        return new ScheduledRun(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spacelift-terraform-provider:index/scheduledRun:ScheduledRun';

    /**
     * Returns true if the given object is an instance of ScheduledRun.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScheduledRun {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScheduledRun.__pulumiType;
    }

    /**
     * Timestamp (unix timestamp) at which time the scheduled run should happen.
     */
    declare public readonly at: pulumi.Output<number | undefined>;
    /**
     * List of cron schedule expressions based on which the scheduled run should be triggered.
     */
    declare public readonly everies: pulumi.Output<string[] | undefined>;
    /**
     * Name of the scheduled run
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Timestamp (unix timestamp) of when the next run will be scheduled.
     */
    declare public /*out*/ readonly nextSchedule: pulumi.Output<number>;
    /**
     * Customer provided runtime configuration for this scheduled run.
     */
    declare public readonly runtimeConfig: pulumi.Output<outputs.ScheduledRunRuntimeConfig | undefined>;
    /**
     * ID of the schedule
     */
    declare public readonly scheduleId: pulumi.Output<string>;
    declare public readonly scheduledRunId: pulumi.Output<string>;
    /**
     * ID of the stack for which to set up the scheduled run
     */
    declare public readonly stackId: pulumi.Output<string>;
    /**
     * Timezone in which the schedule is expressed. Defaults to `UTC`.
     */
    declare public readonly timezone: pulumi.Output<string | undefined>;

    /**
     * Create a ScheduledRun resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScheduledRunArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScheduledRunArgs | ScheduledRunState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScheduledRunState | undefined;
            resourceInputs["at"] = state?.at;
            resourceInputs["everies"] = state?.everies;
            resourceInputs["name"] = state?.name;
            resourceInputs["nextSchedule"] = state?.nextSchedule;
            resourceInputs["runtimeConfig"] = state?.runtimeConfig;
            resourceInputs["scheduleId"] = state?.scheduleId;
            resourceInputs["scheduledRunId"] = state?.scheduledRunId;
            resourceInputs["stackId"] = state?.stackId;
            resourceInputs["timezone"] = state?.timezone;
        } else {
            const args = argsOrState as ScheduledRunArgs | undefined;
            if (args?.stackId === undefined && !opts.urn) {
                throw new Error("Missing required property 'stackId'");
            }
            resourceInputs["at"] = args?.at;
            resourceInputs["everies"] = args?.everies;
            resourceInputs["name"] = args?.name;
            resourceInputs["runtimeConfig"] = args?.runtimeConfig;
            resourceInputs["scheduleId"] = args?.scheduleId;
            resourceInputs["scheduledRunId"] = args?.scheduledRunId;
            resourceInputs["stackId"] = args?.stackId;
            resourceInputs["timezone"] = args?.timezone;
            resourceInputs["nextSchedule"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScheduledRun.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ScheduledRun resources.
 */
export interface ScheduledRunState {
    /**
     * Timestamp (unix timestamp) at which time the scheduled run should happen.
     */
    at?: pulumi.Input<number>;
    /**
     * List of cron schedule expressions based on which the scheduled run should be triggered.
     */
    everies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the scheduled run
     */
    name?: pulumi.Input<string>;
    /**
     * Timestamp (unix timestamp) of when the next run will be scheduled.
     */
    nextSchedule?: pulumi.Input<number>;
    /**
     * Customer provided runtime configuration for this scheduled run.
     */
    runtimeConfig?: pulumi.Input<inputs.ScheduledRunRuntimeConfig>;
    /**
     * ID of the schedule
     */
    scheduleId?: pulumi.Input<string>;
    scheduledRunId?: pulumi.Input<string>;
    /**
     * ID of the stack for which to set up the scheduled run
     */
    stackId?: pulumi.Input<string>;
    /**
     * Timezone in which the schedule is expressed. Defaults to `UTC`.
     */
    timezone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ScheduledRun resource.
 */
export interface ScheduledRunArgs {
    /**
     * Timestamp (unix timestamp) at which time the scheduled run should happen.
     */
    at?: pulumi.Input<number>;
    /**
     * List of cron schedule expressions based on which the scheduled run should be triggered.
     */
    everies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the scheduled run
     */
    name?: pulumi.Input<string>;
    /**
     * Customer provided runtime configuration for this scheduled run.
     */
    runtimeConfig?: pulumi.Input<inputs.ScheduledRunRuntimeConfig>;
    /**
     * ID of the schedule
     */
    scheduleId?: pulumi.Input<string>;
    scheduledRunId?: pulumi.Input<string>;
    /**
     * ID of the stack for which to set up the scheduled run
     */
    stackId: pulumi.Input<string>;
    /**
     * Timezone in which the schedule is expressed. Defaults to `UTC`.
     */
    timezone?: pulumi.Input<string>;
}

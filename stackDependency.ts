// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class StackDependency extends pulumi.CustomResource {
    /**
     * Get an existing StackDependency resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StackDependencyState, opts?: pulumi.CustomResourceOptions): StackDependency {
        return new StackDependency(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spacelift-terraform-provider:index/stackDependency:StackDependency';

    /**
     * Returns true if the given object is an instance of StackDependency.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StackDependency {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StackDependency.__pulumiType;
    }

    /**
     * immutable ID (slug) of stack to depend on.
     */
    declare public readonly dependsOnStackId: pulumi.Output<string>;
    declare public readonly stackDependencyId: pulumi.Output<string>;
    /**
     * immutable ID (slug) of stack which has a dependency.
     */
    declare public readonly stackId: pulumi.Output<string>;

    /**
     * Create a StackDependency resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StackDependencyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StackDependencyArgs | StackDependencyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StackDependencyState | undefined;
            resourceInputs["dependsOnStackId"] = state?.dependsOnStackId;
            resourceInputs["stackDependencyId"] = state?.stackDependencyId;
            resourceInputs["stackId"] = state?.stackId;
        } else {
            const args = argsOrState as StackDependencyArgs | undefined;
            if (args?.dependsOnStackId === undefined && !opts.urn) {
                throw new Error("Missing required property 'dependsOnStackId'");
            }
            if (args?.stackId === undefined && !opts.urn) {
                throw new Error("Missing required property 'stackId'");
            }
            resourceInputs["dependsOnStackId"] = args?.dependsOnStackId;
            resourceInputs["stackDependencyId"] = args?.stackDependencyId;
            resourceInputs["stackId"] = args?.stackId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StackDependency.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StackDependency resources.
 */
export interface StackDependencyState {
    /**
     * immutable ID (slug) of stack to depend on.
     */
    dependsOnStackId?: pulumi.Input<string>;
    stackDependencyId?: pulumi.Input<string>;
    /**
     * immutable ID (slug) of stack which has a dependency.
     */
    stackId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StackDependency resource.
 */
export interface StackDependencyArgs {
    /**
     * immutable ID (slug) of stack to depend on.
     */
    dependsOnStackId: pulumi.Input<string>;
    stackDependencyId?: pulumi.Input<string>;
    /**
     * immutable ID (slug) of stack which has a dependency.
     */
    stackId: pulumi.Input<string>;
}

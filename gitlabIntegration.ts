// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GitlabIntegration extends pulumi.CustomResource {
    /**
     * Get an existing GitlabIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GitlabIntegrationState, opts?: pulumi.CustomResourceOptions): GitlabIntegration {
        return new GitlabIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spacelift-terraform-provider:index/gitlabIntegration:GitlabIntegration';

    /**
     * Returns true if the given object is an instance of GitlabIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GitlabIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GitlabIntegration.__pulumiType;
    }

    /**
     * API host URL
     */
    declare public readonly apiHost: pulumi.Output<string>;
    /**
     * Description of the integration
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Is the GitLab integration the default for all spaces? If set to `true` the space must be set to `root` in `space_id` or
     * left empty which uses the default
     */
    declare public readonly isDefault: pulumi.Output<boolean | undefined>;
    /**
     * Labels to set on the integration
     */
    declare public readonly labels: pulumi.Output<string[] | undefined>;
    /**
     * The friendly name of the integration
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The GitLab API Token
     */
    declare public readonly privateToken: pulumi.Output<string>;
    /**
     * ID (slug) of the space the integration is in; Default: `root`
     */
    declare public readonly spaceId: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the integration should use git checkout. If false source code will be downloaded using the VCS API.
     * Defaults to true.
     */
    declare public readonly useGitCheckout: pulumi.Output<boolean>;
    /**
     * User facing host URL.
     */
    declare public readonly userFacingHost: pulumi.Output<string>;
    /**
     * VCS checks configured for GitLab repositories. Possible values: INDIVIDUAL, AGGREGATED, ALL. Defaults to INDIVIDUAL.
     */
    declare public readonly vcsChecks: pulumi.Output<string | undefined>;
    /**
     * Secret for webhooks originating from GitLab repositories
     */
    declare public /*out*/ readonly webhookSecret: pulumi.Output<string>;
    /**
     * URL for webhooks originating from GitLab repositories
     */
    declare public /*out*/ readonly webhookUrl: pulumi.Output<string>;

    /**
     * Create a GitlabIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GitlabIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GitlabIntegrationArgs | GitlabIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GitlabIntegrationState | undefined;
            resourceInputs["apiHost"] = state?.apiHost;
            resourceInputs["description"] = state?.description;
            resourceInputs["isDefault"] = state?.isDefault;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["privateToken"] = state?.privateToken;
            resourceInputs["spaceId"] = state?.spaceId;
            resourceInputs["useGitCheckout"] = state?.useGitCheckout;
            resourceInputs["userFacingHost"] = state?.userFacingHost;
            resourceInputs["vcsChecks"] = state?.vcsChecks;
            resourceInputs["webhookSecret"] = state?.webhookSecret;
            resourceInputs["webhookUrl"] = state?.webhookUrl;
        } else {
            const args = argsOrState as GitlabIntegrationArgs | undefined;
            if (args?.apiHost === undefined && !opts.urn) {
                throw new Error("Missing required property 'apiHost'");
            }
            if (args?.privateToken === undefined && !opts.urn) {
                throw new Error("Missing required property 'privateToken'");
            }
            if (args?.userFacingHost === undefined && !opts.urn) {
                throw new Error("Missing required property 'userFacingHost'");
            }
            resourceInputs["apiHost"] = args?.apiHost;
            resourceInputs["description"] = args?.description;
            resourceInputs["isDefault"] = args?.isDefault;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["privateToken"] = args?.privateToken ? pulumi.secret(args.privateToken) : undefined;
            resourceInputs["spaceId"] = args?.spaceId;
            resourceInputs["useGitCheckout"] = args?.useGitCheckout;
            resourceInputs["userFacingHost"] = args?.userFacingHost;
            resourceInputs["vcsChecks"] = args?.vcsChecks;
            resourceInputs["webhookSecret"] = undefined /*out*/;
            resourceInputs["webhookUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateToken", "webhookSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(GitlabIntegration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GitlabIntegration resources.
 */
export interface GitlabIntegrationState {
    /**
     * API host URL
     */
    apiHost?: pulumi.Input<string>;
    /**
     * Description of the integration
     */
    description?: pulumi.Input<string>;
    /**
     * Is the GitLab integration the default for all spaces? If set to `true` the space must be set to `root` in `space_id` or
     * left empty which uses the default
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * Labels to set on the integration
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The friendly name of the integration
     */
    name?: pulumi.Input<string>;
    /**
     * The GitLab API Token
     */
    privateToken?: pulumi.Input<string>;
    /**
     * ID (slug) of the space the integration is in; Default: `root`
     */
    spaceId?: pulumi.Input<string>;
    /**
     * Indicates whether the integration should use git checkout. If false source code will be downloaded using the VCS API.
     * Defaults to true.
     */
    useGitCheckout?: pulumi.Input<boolean>;
    /**
     * User facing host URL.
     */
    userFacingHost?: pulumi.Input<string>;
    /**
     * VCS checks configured for GitLab repositories. Possible values: INDIVIDUAL, AGGREGATED, ALL. Defaults to INDIVIDUAL.
     */
    vcsChecks?: pulumi.Input<string>;
    /**
     * Secret for webhooks originating from GitLab repositories
     */
    webhookSecret?: pulumi.Input<string>;
    /**
     * URL for webhooks originating from GitLab repositories
     */
    webhookUrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GitlabIntegration resource.
 */
export interface GitlabIntegrationArgs {
    /**
     * API host URL
     */
    apiHost: pulumi.Input<string>;
    /**
     * Description of the integration
     */
    description?: pulumi.Input<string>;
    /**
     * Is the GitLab integration the default for all spaces? If set to `true` the space must be set to `root` in `space_id` or
     * left empty which uses the default
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * Labels to set on the integration
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The friendly name of the integration
     */
    name?: pulumi.Input<string>;
    /**
     * The GitLab API Token
     */
    privateToken: pulumi.Input<string>;
    /**
     * ID (slug) of the space the integration is in; Default: `root`
     */
    spaceId?: pulumi.Input<string>;
    /**
     * Indicates whether the integration should use git checkout. If false source code will be downloaded using the VCS API.
     * Defaults to true.
     */
    useGitCheckout?: pulumi.Input<boolean>;
    /**
     * User facing host URL.
     */
    userFacingHost: pulumi.Input<string>;
    /**
     * VCS checks configured for GitLab repositories. Possible values: INDIVIDUAL, AGGREGATED, ALL. Defaults to INDIVIDUAL.
     */
    vcsChecks?: pulumi.Input<string>;
}

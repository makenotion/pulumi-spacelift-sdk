// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AwsRole extends pulumi.CustomResource {
    /**
     * Get an existing AwsRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsRoleState, opts?: pulumi.CustomResourceOptions): AwsRole {
        return new AwsRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spacelift-terraform-provider:index/awsRole:AwsRole';

    /**
     * Returns true if the given object is an instance of AwsRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsRole.__pulumiType;
    }

    declare public readonly awsRoleId: pulumi.Output<string>;
    /**
     * AWS IAM role session duration in seconds
     */
    declare public readonly durationSeconds: pulumi.Output<number>;
    /**
     * Custom external ID (works only for private workers).
     */
    declare public readonly externalId: pulumi.Output<string | undefined>;
    /**
     * Generate AWS credentials in the private worker. Defaults to `false`.
     */
    declare public readonly generateCredentialsInWorker: pulumi.Output<boolean | undefined>;
    /**
     * ID of the module which assumes the AWS IAM role
     */
    declare public readonly moduleId: pulumi.Output<string | undefined>;
    /**
     * AWS region to select a regional AWS STS endpoint.
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    /**
     * ARN of the AWS IAM role to attach
     */
    declare public readonly roleArn: pulumi.Output<string>;
    /**
     * ID of the stack which assumes the AWS IAM role
     */
    declare public readonly stackId: pulumi.Output<string | undefined>;

    /**
     * Create a AwsRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsRoleArgs | AwsRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsRoleState | undefined;
            resourceInputs["awsRoleId"] = state?.awsRoleId;
            resourceInputs["durationSeconds"] = state?.durationSeconds;
            resourceInputs["externalId"] = state?.externalId;
            resourceInputs["generateCredentialsInWorker"] = state?.generateCredentialsInWorker;
            resourceInputs["moduleId"] = state?.moduleId;
            resourceInputs["region"] = state?.region;
            resourceInputs["roleArn"] = state?.roleArn;
            resourceInputs["stackId"] = state?.stackId;
        } else {
            const args = argsOrState as AwsRoleArgs | undefined;
            if (args?.roleArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["awsRoleId"] = args?.awsRoleId;
            resourceInputs["durationSeconds"] = args?.durationSeconds;
            resourceInputs["externalId"] = args?.externalId;
            resourceInputs["generateCredentialsInWorker"] = args?.generateCredentialsInWorker;
            resourceInputs["moduleId"] = args?.moduleId;
            resourceInputs["region"] = args?.region;
            resourceInputs["roleArn"] = args?.roleArn;
            resourceInputs["stackId"] = args?.stackId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsRole.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AwsRole resources.
 */
export interface AwsRoleState {
    awsRoleId?: pulumi.Input<string>;
    /**
     * AWS IAM role session duration in seconds
     */
    durationSeconds?: pulumi.Input<number>;
    /**
     * Custom external ID (works only for private workers).
     */
    externalId?: pulumi.Input<string>;
    /**
     * Generate AWS credentials in the private worker. Defaults to `false`.
     */
    generateCredentialsInWorker?: pulumi.Input<boolean>;
    /**
     * ID of the module which assumes the AWS IAM role
     */
    moduleId?: pulumi.Input<string>;
    /**
     * AWS region to select a regional AWS STS endpoint.
     */
    region?: pulumi.Input<string>;
    /**
     * ARN of the AWS IAM role to attach
     */
    roleArn?: pulumi.Input<string>;
    /**
     * ID of the stack which assumes the AWS IAM role
     */
    stackId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AwsRole resource.
 */
export interface AwsRoleArgs {
    awsRoleId?: pulumi.Input<string>;
    /**
     * AWS IAM role session duration in seconds
     */
    durationSeconds?: pulumi.Input<number>;
    /**
     * Custom external ID (works only for private workers).
     */
    externalId?: pulumi.Input<string>;
    /**
     * Generate AWS credentials in the private worker. Defaults to `false`.
     */
    generateCredentialsInWorker?: pulumi.Input<boolean>;
    /**
     * ID of the module which assumes the AWS IAM role
     */
    moduleId?: pulumi.Input<string>;
    /**
     * AWS region to select a regional AWS STS endpoint.
     */
    region?: pulumi.Input<string>;
    /**
     * ARN of the AWS IAM role to attach
     */
    roleArn: pulumi.Input<string>;
    /**
     * ID of the stack which assumes the AWS IAM role
     */
    stackId?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class StackDependencyReference extends pulumi.CustomResource {
    /**
     * Get an existing StackDependencyReference resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StackDependencyReferenceState, opts?: pulumi.CustomResourceOptions): StackDependencyReference {
        return new StackDependencyReference(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spacelift-terraform-provider:index/stackDependencyReference:StackDependencyReference';

    /**
     * Returns true if the given object is an instance of StackDependencyReference.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StackDependencyReference {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StackDependencyReference.__pulumiType;
    }

    /**
     * Name of the input of the stack dependency reference
     */
    declare public readonly inputName: pulumi.Output<string>;
    /**
     * Name of the output of stack to depend on
     */
    declare public readonly outputName: pulumi.Output<string>;
    /**
     * Immutable ID of stack dependency
     */
    declare public readonly stackDependencyId: pulumi.Output<string>;
    declare public readonly stackDependencyReferenceId: pulumi.Output<string>;
    /**
     * Whether the dependents should be triggered even if the value of the reference did not change.
     */
    declare public readonly triggerAlways: pulumi.Output<boolean | undefined>;

    /**
     * Create a StackDependencyReference resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StackDependencyReferenceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StackDependencyReferenceArgs | StackDependencyReferenceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StackDependencyReferenceState | undefined;
            resourceInputs["inputName"] = state?.inputName;
            resourceInputs["outputName"] = state?.outputName;
            resourceInputs["stackDependencyId"] = state?.stackDependencyId;
            resourceInputs["stackDependencyReferenceId"] = state?.stackDependencyReferenceId;
            resourceInputs["triggerAlways"] = state?.triggerAlways;
        } else {
            const args = argsOrState as StackDependencyReferenceArgs | undefined;
            if (args?.inputName === undefined && !opts.urn) {
                throw new Error("Missing required property 'inputName'");
            }
            if (args?.outputName === undefined && !opts.urn) {
                throw new Error("Missing required property 'outputName'");
            }
            if (args?.stackDependencyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'stackDependencyId'");
            }
            resourceInputs["inputName"] = args?.inputName;
            resourceInputs["outputName"] = args?.outputName;
            resourceInputs["stackDependencyId"] = args?.stackDependencyId;
            resourceInputs["stackDependencyReferenceId"] = args?.stackDependencyReferenceId;
            resourceInputs["triggerAlways"] = args?.triggerAlways;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StackDependencyReference.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StackDependencyReference resources.
 */
export interface StackDependencyReferenceState {
    /**
     * Name of the input of the stack dependency reference
     */
    inputName?: pulumi.Input<string>;
    /**
     * Name of the output of stack to depend on
     */
    outputName?: pulumi.Input<string>;
    /**
     * Immutable ID of stack dependency
     */
    stackDependencyId?: pulumi.Input<string>;
    stackDependencyReferenceId?: pulumi.Input<string>;
    /**
     * Whether the dependents should be triggered even if the value of the reference did not change.
     */
    triggerAlways?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a StackDependencyReference resource.
 */
export interface StackDependencyReferenceArgs {
    /**
     * Name of the input of the stack dependency reference
     */
    inputName: pulumi.Input<string>;
    /**
     * Name of the output of stack to depend on
     */
    outputName: pulumi.Input<string>;
    /**
     * Immutable ID of stack dependency
     */
    stackDependencyId: pulumi.Input<string>;
    stackDependencyReferenceId?: pulumi.Input<string>;
    /**
     * Whether the dependents should be triggered even if the value of the reference did not change.
     */
    triggerAlways?: pulumi.Input<boolean>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IdpGroupMapping extends pulumi.CustomResource {
    /**
     * Get an existing IdpGroupMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdpGroupMappingState, opts?: pulumi.CustomResourceOptions): IdpGroupMapping {
        return new IdpGroupMapping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spacelift:index/idpGroupMapping:IdpGroupMapping';

    /**
     * Returns true if the given object is an instance of IdpGroupMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdpGroupMapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdpGroupMapping.__pulumiType;
    }

    /**
     * Description of the IdP group mapping
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly idpGroupMappingId!: pulumi.Output<string>;
    /**
     * Name of the IdP group as defined in the SSO provider - should be unique per account
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of access rules for the IdP group.
     *
     * @deprecated Deprecated
     */
    public readonly policies!: pulumi.Output<outputs.IdpGroupMappingPolicy[] | undefined>;

    /**
     * Create a IdpGroupMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IdpGroupMappingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdpGroupMappingArgs | IdpGroupMappingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdpGroupMappingState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["idpGroupMappingId"] = state ? state.idpGroupMappingId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
        } else {
            const args = argsOrState as IdpGroupMappingArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["idpGroupMappingId"] = args ? args.idpGroupMappingId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdpGroupMapping.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IdpGroupMapping resources.
 */
export interface IdpGroupMappingState {
    /**
     * Description of the IdP group mapping
     */
    description?: pulumi.Input<string>;
    idpGroupMappingId?: pulumi.Input<string>;
    /**
     * Name of the IdP group as defined in the SSO provider - should be unique per account
     */
    name?: pulumi.Input<string>;
    /**
     * List of access rules for the IdP group.
     *
     * @deprecated Deprecated
     */
    policies?: pulumi.Input<pulumi.Input<inputs.IdpGroupMappingPolicy>[]>;
}

/**
 * The set of arguments for constructing a IdpGroupMapping resource.
 */
export interface IdpGroupMappingArgs {
    /**
     * Description of the IdP group mapping
     */
    description?: pulumi.Input<string>;
    idpGroupMappingId?: pulumi.Input<string>;
    /**
     * Name of the IdP group as defined in the SSO provider - should be unique per account
     */
    name?: pulumi.Input<string>;
    /**
     * List of access rules for the IdP group.
     *
     * @deprecated Deprecated
     */
    policies?: pulumi.Input<pulumi.Input<inputs.IdpGroupMappingPolicy>[]>;
}
